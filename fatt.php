<?php
define("VERSION", '6.0');
define("TOOL", 'FATT');
$GLOBALS['time'] = date("Y-m-d-H:i:s");


/******************************************************

					Startup Class

					-------------

- Manages the display of the menu and performs startup tasks

	- Start Sessions

	- Restrict Script Access based on SQL Backup Status

******************************************************/

if(isset($_GET['logs'])){

		echo '<HTML> <header> <title> '.TOOL.' LOG REVIEW! </title> <H1>WordPress Debug Log:</H1><H4>This field is showing you the WordPress debug.log file held within wp-content.<p> <iframe src="./wp-content/debug.log"  width="100%" height="30%"></iframe><p> <p> <H1>File Scan:</H1><p> <iframe src="./wp-content/file_scan.log" width="100%" height="30%"></iframe><p> <H1>Database Scan:</H1><p> <iframe src="./wp-content/db_scan.log" width="100%" height="30%"></iframe>';

	}

elseif(isset($_GET['mail'])){
	$cuser= $_SESSION['username'];
	$time = date("Y-m-d H:i:s");
	$log = "./.wpc.log";
	$action = "phpmail";
	$cmd =  "echo -en '[".$time."] U: ".$cuser." - Cmd: ".$action."\n' >> ".$log."\n";
	shell_exec($cmd);

	?>

<html>



<body>

	<?php

if (isset($_REQUEST['from']))

//if "email" is filled out, send email

  {

  //send email
	

	$apsub = 'apsubmit@secureserver.net'; 

	$subject = time().' - Managed WordPress Mail Check - delete me -';//Added the time() so we can track the message easier

	$message = 'This message was generated by an automated tool by support. If you can read this please delete this message.';

 if (mail($to,$subject,$message))

	{

	echo "Email sent! PHP mail() function is working properly!";

	}

	else

	{

	echo "Error - Mail not sent! Please troubleshoot possible causes. Ensure relay limit is not reached and account is not blocked in Splunk.";

	}

  }

else

//if "email" is not filled out, display the form

  {

	$apsub = 'apsubmit@secureserver.net'; 

	$subject = time().' - Managed WordPress Mail Check - delete me -';//Added the time() so we can track the message easier

	$message = 'This message was generated by an automated tool by support. If you can read this please delete this message';

if (mail($to,$subject,$message))

	{

	echo "Email sent! PHP mail() function is working properly!";

	}

	else

	{

	echo "Error - Mail not sent! Please troubleshoot possible causes. Ensure relay limit not reached and account not blocked in Splunk";

	}

  

  }

?>



</body>

</html>

<?php //BEGIN PHP_INFO

}

elseif(isset($_GET['phpinfo'])){?>

<style type="text/css">
	@import url(http://fonts.googleapis.com/css?family=PT+Mono);
	#phpinfo body,
	body,
	html,
	div {
		cursor: default;
		background-color: #13488A
	}
	
	#phpinfo body,
	#phpinfo pre,
	h1,
	h2,
	td,
	th {
		font-family: 'PT Mono', Tahoma, Geneva, sans-serif
	}
	
	#phpinfo .e,
	#phpinfo .h {
		font-weight: 700;
		color: #FFF;
		min-width:
	}
	
	#phpinfo body,
	body {
		color: #FFF
	}
	
	#phpinfo pre {
		margin: 2px
	}
	
	#phpinfo a:link {
		color: #FFF;
		text-decoration: none;
		background-color: #fff
	}
	
	#phpinfo a:hover {
		text-decoration: underline
	}
	
	#phpinfo table {
		border-collapse: collapse;
	}
	
	#phpinfo .center {
		text-align: center
	}
	
	#phpinfo .center table {
		margin-left: auto;
		margin-right: auto;
		text-align: left;
		width: 50%;
		margin-top: 1%;
	}
	
	#phpinfo .center th {
		text-align: center!important
	}
	
	#phpinfo td,
	th {
		border: 1px solid #222;
		font-size: 90%;
		vertical-align: middle
	}
	
	#phpinfo h1 {
		font-size: 150%
	}
	
	#phpinfo h2 {
		font-size: 125%
	}
	
	#phpinfo .p {
		text-align: center
	}
	
	#phpinfo .e {
		background-color: #333
	}
	
	#phpinfo .e:hover {
		background-color: #373737
	}
	
	#phpinfo .h {
		background-color: #236AC3
	}
	
	#phpinfo .v {
		background-color: #333;
		color: #89E14A
	}
	
	#phpinfo .v:hover {
		background-color: #373737;
		color: #89E14A
	}
	
	#phpinfo .vr,
	#phpinfo hr {
		background-color: #333;
		color: #FFF
	}
	
	#phpinfo .vr {
		text-align: right
	}
	
	#phpinfo img {
		float: right;
		border: 0
	}
	
	#phpinfo hr {
		width: 600px;
		border: 0;
		height: 1px
	}
</style>



<div id="phpinfo">

	<?php

$cuser= $_SESSION['username'];
$time = date("Y-m-d H:i:s");
$log = "./.wpc.log";
$action = "phpinfo";
$cmd =  "echo -en '[".$time."] U: ".$cuser." - Cmd: ".$action."\n' >> ".$log."\n";
shell_exec($cmd);
ob_start () ;

phpinfo () ;

$pinfo = ob_get_contents () ;

ob_end_clean () ;


echo ( str_replace ( "module_Zend Optimizer", "module_Zend_Optimizer", preg_replace ( '%^.*<body>(.*)</body>.*$%ms', '$1', $pinfo ) ) ) ;

//END PHP_INFO ?>

</div>



<?php

}

elseif(isset($_GET['integrity'])){
	
	$cuser= $_SESSION['username'];
	$time = date("Y-m-d H:i:s");
	$log = "./.wpc.log";
	$action = "integrity";
	$cmd =  "echo -en '[".$time."] U: ".$cuser." - Cmd: ".$action."\n' >> ".$log."\n";
	shell_exec($cmd);



define('ABSPATH', './');

if ( defined( 'ABSPATH' ) ) {

	include( ABSPATH . 'wp-includes/version.php' );

	$wp_locale = isset( $wp_local_package ) ? $wp_local_package : 'en_US';

	$apiurl = 'https://api.wordpress.org/core/checksums/1.0/?version=' . $wp_version . '&locale=' .  $wp_locale;

	$json = json_decode ( file_get_contents ( $apiurl ) );

	$checksums = $json->checksums;

	$pass = "";

	$fail = "";



	foreach( $checksums as $file => $checksum ) {

		$file_path = ABSPATH . $file;



		if ( file_exists( $file_path ) ) {

			if ( md5_file ($file_path) !== $checksum ) {

				// do something when a checksum doesn't match

				$fail .= "<font color='red'>".$file."</font><br>";

			}

			else{

				$pass .= "<font color='green'>".$file."</font><br>";

			}

		}

	}

	if ($fail == ""){

		$fail = "None";

	}

	echo "

	<style type='text/css'>

#wrap {

   width:600px;

   margin:0 auto;

}

#left_col {

   float:left;

   width:300px;

}

#right_col {

   float:right;

   width:300px;

}

</style>



<div id='wrap'>

    <div id='left_col'>

		<h1>Failed:</h1><br>

        ".$fail."

    </div>

    <div id='right_col'>

		<h1>Passed:</h1><br>

        ".$pass."

    </div>

</div>

	";

}



}



elseif(isset($_GET['core'])){
	$cuser= $_SESSION['username'];
	$time = date("Y-m-d H:i:s");
	$log = "./.wpc.log";
	$action = "core";
	$cmd =  "echo -en '[".$time."] U: ".$cuser." - Cmd: ".$action."\n' >> ".$log."\n";
	shell_exec($cmd);
?>

	<h1>WARNING</h1>

	<h4>This will replace the core files.
		<font color='red'>Do not use this function with Managed WordPress</font>
	</h4><br />



	<?php

$config['WP_VER'] = shell_exec("cat wp-includes/version.php | grep \"wp_version =\" | cut -d\' -f 2");

$config['WORD_WGET'] = 'wget --no-check-certificate https://wordpress.org/wordpress-'.trim($config['WP_VER']).'.zip';

$config['TIME'] = time();

$config['CUR_URL'] = "//{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}&coreOK={$config['TIME']}";

?>

		<a href='https://wordpress.org/wordpress-<?php echo $config[' WP_VER ']; ?>.zip'>Manually download Wordpress <?php echo $config['WP_VER'];?></a>

		<br /><strong>or</strong><br />

		<a href='<?php echo $config['CUR_URL'] ?>'>Click here to complete the core file replacement</a>

		<br /><br />

		<pre>

<?php

$time = date("_His_mdY");

$coreback = ".core_backup".$time."/";

if (isset($_REQUEST['coreOK'])){

shell_exec("mkdir -p ".$coreback);

echo "<br />mkdir -p ".$coreback;

shell_exec("mv {wp*php,index.php,license.txt,readme.html,xmlrpc.php,wp-admin,wp-includes} ".$coreback);

echo "<br />mv {wp*php,index.php,license.txt,readme.html,xmlrpc.php,wp-admin,wp-includes} ".$coreback;

shell_exec("cp ".$coreback."wp-config.php ./");

echo "<br />cp ".$coreback."wp-config.php ./";

shell_exec($config['WORD_WGET']);

echo "<br />".$config['WORD_WGET'];

shell_exec("unzip wordpress*.zip");

echo "<br />unzip wordpress*.zip";

shell_exec("mv wordpress/{wp*php,index.php,license.txt,readme.html,xmlrpc.php,wp-admin,wp-includes} ./");

echo "<br />mv wordpress/{wp*php,index.php,license.txt,readme.html,xmlrpc.php,wp-admin,wp-includes} ./";

shell_exec("rm wordpress*.zip");

echo "<br />rm wordpress*.zip";

shell_exec("rm -rf wordpress");

echo "<br />rm -rf wordpress";

shell_exec("chmod 700 ".$coreback);

echo "<br />chmod 700 ".$coreback." (in-case there's malicious code)";

echo "<br /><br />All Done!";

} ?></pre>
		<?php



}else{



//We need to get the current values before we set them

$max_execution = ini_get('max_execution_time');

$memory_limit = ini_get('memory_limit');

ini_set('max_execution_time', 0); // Does not work if safe mode is enabled

ini_set('memory_limit', '256M');



class get_started{

	public $display;		// Display object

	private $db_exists;		// See if the database is empty

	public $db_output;		// Output for the database check

	

	public function __construct(){

			session_start();

		

		// Regenerate session to prevent session hijacking (implement tokens later to prevent session fixation)

		session_regenerate_id(true);

		

		// Session initialization for tarball and sql_backup

		if((!isset($_SESSION['sql_backup']))||(empty($_SESSION['sql_backup'])))

			$_SESSION['sql_backup'] = 'None';

			

		if((!isset($_SESSION['tarball']))||(empty($_SESSION['tarball'])))

			$_SESSION['tarball'] = 'None';

		

		// Returns true or string on error

		$started = $this->initialize();

		

		// Create the display object

		$this->display = new display();

		// We were able to initialize config parsing, so check database and load the menu

		if($started === true){

			$this->check_database();

		}else{

			$started = $this->display->set_error_box($started);

		}

		$this->display->msg = $started;

	}

	

	// Performs all of the initialization

	private function initialize(){

		// Check to see if this is Linux or Windows based on shared library (no powershell support yet)

		if(PHP_SHLIB_SUFFIX == 'dll'){

			return '<h1>'.TOOL.' does not currently support Windows</h1>';

		}

		

		// Check if shell_exec is disabled

		if(!is_callable('shell_exec')||(strpos(ini_get('disable_functions'), 'shell_exec') === true)){

			return '<h1>Shell_exec is not enabled! Cannot parse config file!</h1><h2>Please manually remove '.TOOL.'.</h1>';

		}

		

		// Check if PDO is installed / enabled

		if(!class_exists('PDO')){

			return '<h1>PDO is not installed!</h1><p>We will eventually add in fallbacks to MySQLi and regular MySQL if necessary</p>';

		}

		

		// Check for lock file and see what step it is on

		$directory = dirname($_SERVER['SCRIPT_FILENAME']);

		$lock = $directory.'/'.TOOL.'lock';

		if(file_exists($lock)){

			$stage = shell_exec('cat '.$lock.' 2>&1');

			return '<h1>'.TOOL.' IS WORKING BEHIND THE SCENES!</h1><h2>Current Step: '.$stage.'</h1>';

		}
		// Check for wp-config.php
			$s = new selector();

		if(file_exists('wp-config.php')){

			// Grab all of the database information from the wp-config file
			
			$config['DB_NAME'] = shell_exec("cat wp-config.php | grep DB_NAME |cut -d '\"' -f2| cut -d \' -f 4");

			$config['DB_USER'] = shell_exec("cat wp-config.php | grep DB_USER |cut -d '\"' -f2| cut -d \' -f 4");

			$config['DB_PASSWORD'] = shell_exec("cat wp-config.php | grep DB_PASSWORD |cut -d '\"' -f2| cut -d \' -f 4");

			$config['DB_HOST'] = shell_exec("cat wp-config.php | grep DB_HOST |cut -d '\"' -f2| cut -d \' -f 4");

			$config['DB_HOST_DEBUG'] = shell_exec("cat wp-config.php | grep DB_HOST |cut -d '\"' -f2| cut -d \' -f 4");

			$config['DB_PORT'] = '';

			$config['PREFIX'] = shell_exec("cat wp-config.php | grep table_prefix |cut -d '\"' -f 2 | cut -d \' -f2");

			$config['WP_VER'] = shell_exec("cat wp-includes/version.php | grep \"wp_version =\" | cut -d\' -f 2");

			$GLOBALS['WP_VER'] = $config['WP_VER'];
			

			// Parse the port for the connection string if necessary; otherwise default to 3306

			if(strpos($config['DB_HOST'], ':') !== false){

				$config['DB_PORT'] = str_replace(':', '', substr($config['DB_HOST'], strpos($config['DB_HOST'], ':')));

				$config['DB_HOST'] = substr($config['DB_HOST'], 0, strpos($config['DB_HOST'], ':'));

			}else{

				$config['DB_PORT'] = 3306;

			}		
			
			$dsn = 'mysql:host='.trim($config['DB_HOST']).';port='.trim($config['DB_PORT']).';dbname='.trim($config['DB_NAME']);

			try{
			
				$GLOBALS['pdo'] = new PDO($dsn, trim($config['DB_USER']), trim($config['DB_PASSWORD']));
			
			}catch(PDOException $e){
			
			die('There is an error in the wp-config file! Connection failed: '.$e->getMessage());
			
			}

			$query = $GLOBALS['pdo']->prepare('SELECT SUM( DATA_FREE ) FROM INFORMATION_SCHEMA.PARTITIONS;');
			$query->execute();
			$sum = "SUM( DATA_FREE )";
			$GLOBALS['DBOverhead'] = $query->fetch();
			$GLOBALS['DBOverhead'] = $GLOBALS['DBOverhead'][$sum];
			//unset($pdo);
			
			//download wp-cli for later use
			shell_exec("curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; chmod +x wp-cli.phar");

			
			//Find the current web node			


			$wnode = shell_exec('hostname');

			$GLOBALS['Web_Server'] = $wnode;
			

			//using webnode naming convention to determine if account is gd Managed WordPress. Will be used in flush cache function, and any further gd specific commands are introduced

			$config['W_NODE'] = $wnode;

				if (strpos($wnode, 'nlwpweb') !== false){

				$ismwp = 'true';
				$GLOBALS['ismwp'] = $ismwp;
				$GLOBALS['platform'] = 'Managed WordPress';

				}

				else{

					$ismwp = '0';

					$GLOBALS['ismwp'] = $ismwp;
					if (strpos($wnode, 'plcpnl') !== false){
					$GLOBALS['platform'] = 'cPanel';
					}
					else if (strpos($_SERVER['DOCUMENT_ROOT'], '/home/content/') !== false){
						$GLOBALS['platform'] = '2/4GH';
					}
					else if(strpos($wnode, 'secureserver.net') !== false){
						$GLOBALS['platform'] = 'VPS/DED';
					}
					else{
						$GLOBALS['platform'] = 'Unknown';
					}

				}

			//check to see if wp-cli is installed to use in functions - uses bash/MySQL if 0	

			$checkcli = shell_exec('wp cli version');

			if (strpos($checkcli, 'WP-CLI') !== false){

			$cancli = 'true';

			$GLOBALS['cancli'] = $cancli;

			}

			else{

			$cancli = '0';

			$GLOBALS['cancli'] = $cancli;

			}



		// Check email relays

			$cwd = getcwd();

			$file = 'mailquota.log';

			$swap = str_replace('content', 'mailquota', $cwd);

			$almost = str_replace('html', $file, $swap);

			$last = substr($almost, 0, strpos($almost, ".log"));

			$fin = $last.'.log';

			$cmd = "grep 'COUNT' $fin | sed 's/\[COUNT\]//g'";

			if (file_exists($fin)){

			$relays = shell_exec($cmd);

			$config['E_RELAY'] = $relays;

			}

			else{

			$relays = "Failed";

			$config['E_RELAY'] = $relays;

			}

			// Crude way of setting the site URL for now

			if((isset($_SERVER['HTTPS']))&&(!empty($_SERVER['HTTPS'])))

				$config['SITE_URL'] = 'https://';

			else

				$config['SITE_URL'] = 'http://';

			$config['SITE_URL'] .= $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];

			$config['SITE_URL'] = str_replace(basename($_SERVER['PHP_SELF']), '', $config['SITE_URL']);

			$config['SITE_URL'] = substr($config['SITE_URL'], 0, -1);

			$config['FILEOWNER'] = fileowner("".basename($_SERVER["SCRIPT_FILENAME"])."");

			

			// Create Globals for each of the database variables

			foreach($config as $k => $v){

				// Remove any unwanted spaces

				$v = trim($v);

				// Check for only critical WordPress data

				if(empty($v) && ($k !== 'DB_PORT') && ($k !== 'WP_VER')&& ($k !== 'E_RELAY') && ($k !== 'FILEOWNER')){

					return '<h1>Error: Check wp-config.php file for empty '.$k.'!</h1>';

				}

				define($k, $v);

			}

				//password generator
				$chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+-=";
				$length = 20;
				$len = strlen($chars);
				$pw = '';
				for ($i=0;$i<$length;$i++){
					$pw .= substr($chars, rand(0, $len-1), 1);
				}
				$pw = str_shuffle($pw);

				define('WPPS_PW', $pw);


		//cURLing the site once with debug to save header info  -- NEEDS FIXED BKU
		function get_headers_from_curl_response($response){
   		$headers = array();
    	$header_text = substr($response, 0, strpos($response, "\r\n\r\n"));
    		foreach (explode("\r\n", $header_text) as $i => $line)
        		if ($i === 0)
            	$headers['http_code'] = $line;
        		else{
            		list ($key, $value) = explode(': ', $line);
           			$headers[$key] = $value;
        		}
    return $headers;
}

$ch = curl_init("".SITE_URL."/?gddebug=1");
curl_setopt($ch, CURLOPT_HEADER, 1);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$response = curl_exec($ch);
$headers = get_headers_from_curl_response($response);
foreach($headers as $k => $v) {
    define($k, $v);
}
$GLOBALS['http_status'] = $headers['http_code'];
if($GLOBALS['ismwp'] == false){
	$GLOBALS['Proxy_Server'] = "N/A - this is not a MWP account";
	$GLOBALS['Cache_Server'] = "N/A";
	$GLOBALS['is_cached'] = "N/A";
}else{
	$GLOBALS['Cache_Server'] = $headers['X-Cache-Server'];
	$GLOBALS['Proxy_Server'] = $headers['X-Proxy-Server'];
	$GLOBALS['is_cached'] = $headers['X-Cache'];
}

$plugs = shell_exec('./wp-cli.phar plugin status');
if(strpos($plugs, 'A worker ') !== false){
$GLOBALS['WORKER'] = "true";
}else{
$GLOBALS['WORKER'] = "0";
}
				
				//function to do maths on bytes to determine size in human readable format
			function doMaths($bytes, $precision = 2) {
  		 		$units = array('B', 'KB', 'MB', 'GB', 'TB');
   				$bytes = max($bytes, 0);
 		  		$pow = floor(($bytes ? log($bytes) : 0) / log(1024));
 				$pow = min($pow, count($units) - 1);

   				// using 1024 because that's how space works
    			$bytes /= pow(1024, $pow);
   				//$bytes /= (1 << (10 * $pow));
  			 return round($bytes, $precision) . ' ' . $units[$pow];
}

			// all init functions must come before the return true/false to work properly 

			return true;

		}else{

			return '<h1>We could not find the wp-config.php file!</h1><p>Please be sure to drop this script into the directory where the wp-config.php file lives.</p>';

		}

			

	}

	public function check_database(){

		// Check to see if there is database data by attempting to get the current site URL

		$check_db = new fix_things();

		$sql_result = $check_db->table_check();

		

		// If the database is not empty, set the form for Create Backup and allow Fix Things to display

		if($sql_result !== false){

			$this->db_exists = true;

			$this->db_output = '<h3>Create Backup</h3><p></p>

								<p>This option exports a compressed (.sql.gz) dump file to the host. Effectively backs up the database.</p><br>

								<div class="row">

									<div class="col-sm-12">

										<form id="create_backup" name="create_backup" role="form" method="post">

											<input type="hidden" name="selector" value="create_backup">

											<button type="submit" class="btn btn-default"><font color="white">CREATE BACKUP</font></button>

										</form>

									</div>

								</div>';

			

		// Else display the warning for the database being empty and force them to import

		}else{

			$this->db_exists = false;

			$this->db_output = $this->display->set_error_box('<p>Database is missing critical data!</p><p class="small"><i>Check to make sure that there is a database and that it is a WordPress application!</i></p><p>It Might be missing tables and/or other critical WordPress data!</p>');

		}

	}

}

/************************************************************

					Display Class

					-------------

- Manages the display for error messages and success messages for AJAX requests.

- Mainly does the formatting of text.

************************************************************/

class display{

	public $msg = '';

	

	public function set_warning_txt($msg){

		return $this->msg = '<p class="text-warning">'.$msg.'</p>';

	}

	

	public function set_warning_box($msg){

		return $this->msg = '<div id="alertBox" class="alert alert-warning" role="alert"><b>'.$msg.'</b></div>';

	}

	

	// Error Selections

	public function set_error_txt($msg){

		return $this->msg = '<p class="text-danger">'.$msg.'</p>';

	}

	

	public function set_error_box($msg){

		return $this->msg = '<div id="alertBox" class="alert alert-danger" role="alert"><b>'.$msg.'</b></div>';

	}

	

	// Success Selections

	public function set_success_txt($msg){

		return $this->msg = '<p class="text-success"><b>'.$msg.'</b></p>';

	}

	

	public function set_success_box($msg){

		return $this->msg = '<div id="alertBox" class="alert alert-success" role="alert">'.$msg.'</div>';

	}



	public function set_success_box_left($msg){

		return $this->msg = '<div id="alertBox" class="alert alert-success" role="alert"><p align="left">'.$msg.'</p></div>';

	}

	public function del_box(){

		 return $this->msg = '<script>setTimeout(function(){var element = document.getElementById("alertBox");element.parentNode.removeChild(element);}, 2000);</script>';

	}

}

/******************************************************

					Selector Class

					--------------

- Acts as the Controller for AJAX requests

	- create_backup		->	Create a backup for the database

	- select_sql_backup	->	Locates and lists MySQL backups found in the immediate directory

	- restore_backup	-> 	Executes the restore for the database with a success/failure response

	- create_archive	->	Backups up database and packs into tarball with wp-content

	- select_archive	->	Locates and lists archives available to unpack

	- unpack_archive	->	Unpacks the archive based on its prefix and file extension

	- get_url			-> 	Gets the current URL on the database based on current prefix

	- set_url			->	Set the URL for the WordPress Application

	- get_prefixes		->	Gets the current prefix(es) from the database

	- set_prefixes		->	Update the prefix on the database tables

	- killself			-> 	Removes the  script

	- killProcesses		->	Runs pkill on processes based on who owns the file

	- roleReset			->  Resets user roles

	- OptDB				->  Optimizes all MySQL tables to remove overhead

	- supportUser		->  Creates a support user "wpps-support" with a randomly generated password.

	- killTransient		->	Removes transient data from database - v2.0.2 adds WooCommerce and Varnish clear.

	- AutoLogin			->  Automatically logs in to wp-admin in a new tab

	- resetRoles        ->  Reset all the User Roles with WP-CLI 

	- cleanup			->	Removes any traces of the script (archives, MySQL Backups, etc)

	- debug_things

******************************************************/

	class selector {

		public $fix = '';	// fix_things class

		public $display;	// display object

		public $archive;	// archive class

		public $mySQL;		// MySQL class

		private $lock;		// lock class

		

		public function __construct($selection = ''){

			$this->fix = new fix_things();

			$this->display = new display();

			$this->mySQL = new mysqlStuffs();

			$this->archive = new MyArchive($this->fix, $this->mySQL);

			$this->lock = new lockFile();

			

			

			if(!empty($selection)){

								

				// Pretty much just for select/backup/restore MySQL

				if(($selection !== 'fix_things')){

					$this->$selection();

				

				// Route actions that require the script to die

				}else{

					$response = '';

					foreach($_POST as $method => $v){

						if(($method !== 'selector')&&($v !== 'false')&&(is_callable($this->$method()))){

							$response .= $this->$method();

						}

					}


					$response .= $this->display->set_warning_box('<p>'.TOOL.' has completed the operation.</p>');

					echo $response;

					echo $this->display->del_box();

					
				}

			}

			

			if(isset($_GET['killself'])){

				$this->killself();
				

			}

		}		

		/** MySQL Backups **/

		

		public function create_backup(){

			$this->logAction("create_backup");

			// Generate the command

			if(($file = $this->mySQL->create_sql_backup()) !== false){

				// No lock is going to exist for this flat option, so create lock

				$cmd = 	$this->lock->updateLock('Backing up MySQL database').

						$this->mySQL->cmd.

						$this->lock->removeLock();

				

				shell_exec($cmd);

				echo $this->display->set_success_box('<p>MySQL Backup created: '.$file.'</p>');

				echo "<script>var btn = document.getElementById('restoreSubmit');var select = document.getElementById('dbDumps'); var opt = document.createElement('option'); opt.value = '".$file."'; opt.innerHTML = '".$file."'; select.appendChild(opt);btn.disabled = false;</script>";

				echo $this->display->del_box();

			}else{

				echo $this->display->set_error_box('<p>An error has occurred while trying to create the backup!</p>');

				echo $this->display->del_box();

			}

		}

		

		public function select_sql_backup(){

			$response = '';

			

			$file_list = $this->mySQL->select_sql_backup();

			

			if(isset($_SESSION['sql_backup'])){

				$response = $this->display->set_success_txt('Last backup file created this session: '. $_SESSION['sql_backup']);

			}

			$response .= '

				<form role="form" class="form-horizontal" method="post">

					<div class="form-group">

						<label for="backup_file" class="col-sm-4 control-label">Select Backup File:</label>

						<div class="col-sm-8">

							<select id="dbDumps" class="form-control" name="backup_file">';

			foreach($file_list as $k=>$v){

				$response .= '<option value="'.$v.'"selected>'.$v.'</option>';

			}

			$response .= '

							</select>

						</div>

					</div>

					<input type="hidden" name="selector" value="restore_backup">

					<div class="col-sm-12">';

			if(!empty($file_list)){

				$response .= '<button id="restoreSubmit" type="submit" class="btn btn-default pull-right"><font color="white">RESTORE BACKUP</font></button>

					</div>

				</form>';

			}

			else{

				$response .= '<button id="restoreSubmit" type="submit" class="btn btn-default pull-right" disabled><font color="white">RESTORE BACKUP</font></button>

					</div>

				</form>';

			}

			echo $response;
		

		}

		

		public function restore_backup(){
			$this->logAction("restore_backup");

			// Generate the command

			if($this->mySQL->restore_sql_backup($_POST['backup_file']) !== false){

				// No lock is going to exist for this flat option, so create lock

				$cmd = 	$this->lock->updateLock('Restoring MySQL database').

						$this->mySQL->cmd.

						$this->lock->removeLock();

				

				// shell_exec will only return NOT empty on error

				shell_exec($cmd);

				echo $this->display->set_success_box('<p>Restored the MySQL database from '.$_POST['backup_file'].' successfully!</p>');

				echo $this->display->del_box();

			}else{

				echo $this->display->set_error_box('<p>An error has occurred!</p><p>Unable to restore the database from file '.$_POST['backup_file'].'!</p>');

				echo $this->display->del_box();

			}

		}

		

		/** Archives **/

		

		public function create_archive(){
			$this->logAction("create_archive");

			if($this->mySQL->create_sql_backup('./wp-content') !== false){

				$file = $this->archive->create_archive();

				$_SESSION['tarball'] = $file;

				// Put together the commands for locks, mysql, and tarball

				$cmd = 	$this->lock->updateLock('Backing up MySQL database').

						$this->mySQL->cmd.

						$this->lock->updateLock('Creating tarball for transport').

						$this->archive->cmd.

						$this->lock->removeLock();

				

				shell_exec($cmd);

				$response = $this->display->set_success_box('Archive completed: '.$file);

				echo "<script>var btn = document.getElementById('archiveSubmit');var select = document.getElementById('archiveList'); var opt = document.createElement('option'); opt.value = '".$file."'; opt.innerHTML = '".$file."'; select.appendChild(opt);btn.disabled = false;</script>";

				

			}else{

				$response = $this->display->set_error_box('<p>Unable to back up the MySQL database!</p><p>MySQL backup and file archive for this process were aborted!</p>');

			}

			

			echo $response;

			echo $this->display->del_box();

		}

		

		public function select_archive(){

			$disabled = '';		// Disables the button if no files are found

			$response = '';

			$archive_list = $this->archive->select_archive();

			

			$response = '

				<form role="form" method="post" class="form-horizontal">

					<div class="form-group">

						<label for="archive_file" class="col-sm-3 control-label">Select Archive:</label>

						<div class="col-sm-8">

							<select id="archiveList" name="archive_file" class="form-control">

								<option selected disabled>-- Choose an Archive --</option>';

			foreach($archive_list as $k=>$v){

				$response .= '<option value="'.$v.'">'.$v.'</option>';

			}

			$response .= '

							</select>

						</div>

					</div>

					<input type="hidden" name="selector" value="unpack_archive">

					<div class="col-sm-12">';

			if(!empty($archive_list)){

				$response .= '<button id="archiveSubmit" type="submit" class="btn btn-default pull-right"><font color ="white">UNPACK ARCHIVE</font></button>

					</div>

				</form>';

			}

			else{

				$response .= '<button id="archiveSubmit" type="submit" class="btn btn-default pull-right" disabled><font color ="white">UNPACK ARCHIVE</font></button>

					</div>

				</form>';

			}

			echo $response;

		}
		
		//#start
		public function child_theme(){
			$parent_sel = $_POST['child_theme_select'];
			$parent_theme = basename($parent_sel);
			
			$mkchild = './wp-cli.phar scaffold child-theme '.$parent_theme.'-child --parent_theme='.$parent_theme.' --theme_name='.$parent_theme.'-child --author="This child theme was generated from the parent theme by WPPS. All Theme credit belongs to original creator(s)" --activate';
			
			shell_exec($mkchild);

			echo $this->display->set_success_box("Successfully created the child theme");
			echo $this->display->del_box();
		}
		
		public function permalinks(){
			/*wp_options -> permalink_structure
				plain = blank
				day and name = /%year%/%monthnum%/%day%/%postname%/
				month and name = /%year%/%monthnum%/%postname%/
				numeric = /archives/%post_id%
				post name = /%postname%/ 
			*/
			if($_POST['permalink_select'] == "blank"){
				$structure = "";
				$sql = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
				$cmd = "\"UPDATE \`".PREFIX."options\` SET option_value = '".$structure."' WHERE option_name = 'permalink_structure';\"";
				shell_exec($sql.$cmd);

			}else{
				$structure = $_POST['permalink_select'];
				$sql = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
				$cmd = "\"UPDATE \`".PREFIX."options\` SET option_value = '".$structure."' WHERE option_name = 'permalink_structure';\"";
				shell_exec($sql.$cmd);
			}

            echo $this->display->set_success_box("Rewrite structure set to '".$structure."'");
			echo $this->display->del_box();
		}

		public function install_ionCube(){
			$this->logAction("install_ionCube");
			if (!defined('PHP_VERSION_ID')) {
    			$version = explode('.', PHP_VERSION);
    			define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));
				}

		if (PHP_VERSION_ID < 50207) {
    		define('PHP_MAJOR_VERSION',   $version[0]);
    		define('PHP_MINOR_VERSION',   $version[1]);
    		define('PHP_RELEASE_VERSION', $version[2]);
			}

			$inipath = php_ini_loaded_file();
			$ini_name = basename($inipath);
			$cmd = "cp ".$inipath.$ini_name;
			shell_exec($cmd);
			
			if($GLOBALS['platform'] == "2/4GH"){
				shell_exec("wget http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86.tar.gz -O ioncube_loaders_lin_x86.tar.gz");
				shell_exec("tar -xzvf ioncube_loaders_lin_x86.tar.gz");

			}else{
				shell_exec("wget http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz -O ioncube_loaders_lin_x86-64.tar.gz");
				shell_exec("tar -xzvf ioncube_loaders_lin_x86-64.tar.gz");
			}
			
			//make the php.ini -no need to hit the wizard when making a copy of the current loaded config and then adding proper lines. I fixed the PHP version calls in the lines to make it work properly. I tried to make sure I used methods that wouldn't mess with your recent work to get it 5.3 ready
			$file_data = "[ZEND]\nzend_extension=\"/usr/local/Zend/lib/Guard-6.0.0/php-".PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION.".x/ZendGuardLoader.so\"\nzend_extension = ".$_SERVER['DOCUMENT_ROOT']."/ioncube/ioncube_loader_lin_".PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION.".so\n";
			if(file_exists($ini_name)){
					$file_data .= file_get_contents($ini_name);
			}
			file_put_contents($ini_name, $file_data);
			shell_exec("rm -f ioncube_loaders_lin_x86*.tar.gz");
			shell_exec('pkill -U '.FILEOWNER.';');

            echo $this->display->set_success_box("ionCube has been enabled!");
            echo $this->display->del_box();
		}
		
		public function unpack_archive(){
			$this->logAction("unpack_archive");

			// Appears checkboxes equal on if checked; else not set at all

			$import = (isset($_POST['import']) ? true : false);

			$automagic = (isset($_POST['automagic']) ? true : false);

			$archive_file = (isset($_POST['archive_file']) ? $_POST['archive_file'] : false);

			$response = '';

			

			if($archive_file !== false){

				// Construct the command and verify checks for importing pass

				if($this->archive->unpack_all_archives($_POST['archive_file'], $import) !== false){

					$cmd = $this->lock->updateLock('Unpacking file archive').

							$this->archive->cmd;

					

					$reponse = '<p>During this processes we have:</p><ul class="list-unstyled">

									<li>- Extracted the wp-content folder</li>';

					


					if($import){

						$backup = $this->mySQL->locate_own_sql();

						if($backup !== false){

							$this->mySQL->restore_sql_backup($backup);

							$cmd .= $this->lock->updateLock('Restoring MySQL database').

									$this->mySQL->cmd;

							$response .= '<li>- Imported the MySQL database</li>';

						}

					}

					

					// If database updates is selected, append commands

					if($automagic){

						$cmd .= $this->lock->updateLock('Applying fixes to the database');

						$response .= '<li>- Updated table prefixes, usermeta, and options</li>';

					}

					

					$cmd .= $this->lock->removeLock();

					shell_exec($cmd);

					

					$response .= '</ul>';

					$response = $this->display->set_success_box($response);

					

				// We cannot automagically restore this archive

				}else{

					$response = $this->display->set_error_box('<p>Unable to decompress the archive.</p><p>Please attempt to decompress the archive manually or upload the archive again.</p>');

				}

			// Archive file was not selected

			}else{

				$response = $this->display->set_error_box('<p>Please select an archive.</p>');

			}

			

			echo $response;

			echo $this->display->del_box();

		}

		

		// Create a new INI file

		public function createINI(){
			$this->logAction("createINI");

			$phpini = new iniGenerator($_POST);

			if($phpini->generate() !== false){

				$this->killProcesses();

				$response = $this->display->set_warning_box($_POST['ini_select'].' successfully created! Processes have been restarted!');

			}else{

				$response = $this->display->set_error_box('<p>An error has occurred! The new INI was not created!</p>');

			}

			

			echo $response;

			echo $this->display->del_box();

		}

		

		public function get_url(){

			$result = $this->fix->get_url();

			if($result !== false){

				$response = '<span class="glyphicon glyphicon-globe glyphicon-size-massive" aria-hidden="true"></span>

							<p id="urlOld" class="small">Old: <i>'.$result.'</i></p>

							<p id="urlNew" class="small">New: <i>'.SITE_URL.'</i></p>

							<input type="hidden" name="set_url" value="false" />';

			

			}else{

				$response = $this->display->set_error_txt('Could not locate the site URL!');

			}

			return $response;

		}

		

		public function set_url(){
			$this->logAction("set_url");

			$old_url = $this->fix->get_url();

			$this->fix->set_url();

			$response = $this->display->set_success_box('<p><b>Site URL Updated!</b></p><p>Old Site URL: '.$old_url.'</p><p>Site URL is '.SITE_URL.'</p>');

			echo "<script>var urlOld = document.getElementById('urlOld'); var urlNew = document.getElementById('urlNew'); urlOld.innerHTML = 'Old: ".$this->fix->get_url()."'; urlNew.innerHTML = 'New: ".SITE_URL."';</script>";

			echo $response;

			echo $this->display->del_box();

			

		}

		

		// Get the prefix list
		public function get_prefixes(){
			// Only allow the option for updating prefix to be available if it can determine the table prefix based on usermeta

			if($this->fix->get_prefix_list() !== false){
				$response = '<span class="glyphicon glyphicon-th-list glyphicon-size-massive" aria-hidden="true"></span>

							<p id="prefixOld" class="small">Old: <i>'.$this->fix->old_prefix.'</i></p>

							<p id="prefixNew" class="small">New: <i>'.PREFIX.'</i></p>

							<input type="hidden" name="set_prefixes" value="false" />';
			// Otherwise display an error box
			}else{
				$response = $this->display->set_error_box('<p>Could not parse prefixes!</p><p>This function will not run until there is only one COMPLETE WordPress database present</p>'); 
			}
			return $response;
}		

		// Set prefixes

		public function set_prefixes(){
			$this->logAction("set_prefixes");

			if($this->fix->rename_tables()){

				$response = $this->display->set_success_box('<p><b>Table Prefixes Updated!</b></p><p>Prefix "'.$this->fix->old_prefix.'" updated to "'.$this->fix->new_prefix.'" on all tables and database entries</p>');

				$this->fix->get_prefix_list();
				echo "<script>var prefixOld = document.getElementById('prefixOld'); var prefixNew = document.getElementById('prefixNew'); prefixOld.innerHTML = 'Old: ".$this->fix->old_prefix."'; prefixNew.innerHTML = 'New: ".PREFIX."'</script>";
			}
			else{
				$response = $this->display->set_error_box('<p>Multiple prefixes were detected! No queries were ran!</p><p>Check the database for multiple usermeta tables</p>');
			}
			echo $response;
			echo $this->display->del_box();
		}

	

		// Auto-destruct the script
		public function killself(){
			$this->logAction("kill_script");
			// Bash clean up assigned to variables		
			$killsql = "find * -type f -name '".TOOL."-SQL_*' -mtime +3 -exec rm {} \;";
			$killarch = "find * -type f -name '".TOOL."-Archive*' -mtime +3 -exec rm {} \;";	
			$killdebug = "mv wp-config.php wp-config.php.debug; find . -type f -name 'wp-config.php.".TOOL."-debug-bak*' -print0 | xargs --null -I{} mv {} wp-config.php;";
			$killreview = "rm ".TOOL."-review.html";
			$logprot = `echo '\n\n# Protect the log files\n<Files  ~ "\.log$">\nOrder Allow,Deny\nDeny from all\n</Files>' >> ./wp-content/.htaccess`;
			// Check to make sure contents in htaccess don't already exist
			$htFile = @file_get_contents("./wp-content/.htaccess");
			$expression = '(.*Protect(.*\n)+.*Files>)';
			$protCheck = preg_match('/'.$expression.'/', $htFile);
			// Establish the path to the script
			$path = $_SERVER['SCRIPT_FILENAME'];	
			// Absolute path to SQL backup
			if(isset($_SESSION['sql_backup'])&&!empty($_SESSION['sql_backup'])){
				$sql_backup = dirname($path).$_SESSION['sql_backup'];
			}
				$debug =  glob('./wp-config.php.'.TOOL.'-debug-bak*');
				$filter = array_filter($debug);
			if (!empty($filter)) {
					shell_exec($killdebug);
				}
				if (file_exists($review)){
				shell_exec($killreview);
					// check to make sure it doesn't exist
					if ($protCheck == 0){
					shell_exec($logprot);
					}
				}
			// Run cleanup
			shell_exec($killsql);
			shell_exec($killarch);
			shell_exec('rm -f wp-cli.phar');
			shell_exec('rm -f '.$path);
			header("Refresh:0");
		}
		
		/************************************************************************      

						Dropdown Functions 

		*************************************************************************/
		private function BackupFramework(){
			$this->logAction("Backup_Framework");
			$fdom = $_SERVER['HTTP_HOST'];
			$dom = str_replace(".","_", $fdom);
			$time = date("_His_mdY");

			$filename = ''.TOOL.'_'.$dom.'_framework_'.$time.'.tar.gz';
			
			$cmd = 'tar -zcf '.$filename.' ./wp-content/plugins/ ./wp-content/themes/';
			$check = ';if [[ $? -ne 0 ]];then echo "Framework backup FAILED!" >> ./.wpc.log;else echo "Framework backup Success!" >> ./.wpc.log;fi;';

			shell_exec($cmd.$check);

			echo $this->display->set_success_box("Plugins and Themes have been backed up!");

			echo $this->display->del_box();
		}

		private function ResetUpload(){
			$this->logAction("Reset_Upload");
			$sql = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
			$cmd = "\"UPDATE \`".PREFIX."options\` SET option_value = 'wp-content/uploads' WHERE option_name = 'upload_path';\"";


			shell_exec($sql.$cmd);

			echo $this->display->set_success_box("Upload path has been reset!");

			echo $this->display->del_box();
		}

		private function LoginReset(){
			$this->logAction("Reset_Lockout");
			$sql = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
			$cmd = "\"UPDATE \`".PREFIX."options\` SET option_value = '' WHERE option_name = 'limit_login_lockouts' LIMIT 1;\"";


			shell_exec($sql.$cmd);

			echo $this->display->set_success_box("Login lockout has been reset!");

			echo $this->display->del_box();
		}
			//Thumbnail Regen
		private function regenthumbs(){
			$this->logAction("Regen_Thumbnails");
            $sql = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
            $cmd = "\"UPDATE \`".PREFIX."options\` SET option_value = '' WHERE option_name = 'upload_url_path' LIMIT 1;\"";

            shell_exec($sql.$cmd);
			shell_exec('./wp-cli.phar media regenerate --only-missing');

			echo $this->display->set_success_box("Media thumbnails have been regenerated!");
			echo $this->display->del_box();
			}
			//Enable Worker
			private function EnableWorker(){
			$this->logAction("Enable_Worker");

			shell_exec('./wp-cli.phar plugin install worker --activate');
			echo $this->display->set_success_box("ManageWP Worker Plugin has been enabled!");
			echo $this->display->del_box();
			}
		
		// Update Core
		private function UpdateCore(){
			$this->logAction("Update_Core");

			shell_exec('./wp-cli.phar core update --force');
			echo $this->display->set_success_box("WordPress Core have been updated!");
			echo $this->display->del_box();
			}
		
		// Disable comments historically 
		private function DisComms(){
			$this->logAction("Disable_Comments");
			$sql = "\"UPDATE \`".PREFIX."posts\` SET comment_status='closed';UPDATE \`".PREFIX."options\` SET option_value='closed' WHERE option_name='default_comment_status';\"";
			$cmd = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
			
			shell_exec($cmd.$sql);
			echo $this->display->set_success_box("Comments have been disabled!");
			echo $this->display->del_box();

		}

		public function redraw (){
			//repopulate archives
			$response = "<script>var archives = document.getElementById('archiveList'); archives.innerHTML='";
			$archive_list = $this->archive->select_archive();
			if(count($archive_list) > 0){
				echo '<script>var archivebtn = document.getElementById("archiveSubmit"); archivebtn.disabled = false;</script>';
			}
			foreach($archive_list as $k=>$v){
				$response .= '<option value="'.$v.'">'.$v.'</option>';
			}
			$response .= "';</script>";
			echo $response;
			
			//repopulate databases
			$response = "<script>var databases = document.getElementById('dbDumps'); databases.innerHTML='";
			$file_list = $this->mySQL->select_sql_backup();
			if(count($file_list) > 0){
				echo '<script>var dbbtn = document.getElementById("restoreSubmit"); dbbtn.disabled = false;</script>';
			}
			
			foreach($file_list as $k=>$v){
				$response .= '<option value="'.$v.'">'.$v.'</option>';
			}
			$response .= "';</script>";
			echo $response;
			
			//repopulate prefix
			echo $this->fix->old_prefix;
			echo "<script>var prefixOld = document.getElementById('prefixOld'); var prefixNew = document.getElementById('prefixNew'); prefixOld.innerHTML = 'Old: ".$this->fix->get_prefix_list()."'; prefixNew.innerHTML = 'New: ".PREFIX."'</script>";
			
			//repopulate siteurl
			echo "<script>var urlOld = document.getElementById('urlOld'); var urlNew = document.getElementById('urlNew'); urlOld.innerHTML = 'Old: ".$this->fix->get_url()."'; urlNew.innerHTML = 'New: ".SITE_URL."';</script>";
            
            //repopulate db overhead
            $query = $GLOBALS['pdo']->prepare('SELECT SUM( DATA_FREE ) FROM INFORMATION_SCHEMA.PARTITIONS;');
			$query->execute();
			$sum = "SUM( DATA_FREE )";
			$GLOBALS['DBOverhead'] = $query->fetch();
			$GLOBALS['DBOverhead'] = $GLOBALS['DBOverhead'][$sum];
            
            echo "<script>var overhead = document.getElementById('overhead'); overhead.innerHTML = '".strval(doMaths($GLOBALS['DBOverhead']))."'</script>";
            
            //Repopulate the latest backup in the header
            echo "<script>var latestSQL = document.getElementById('last_sql_backup');var latestTAR = document.getElementById('last_tar_backup'); latestSQL.innerHTML = '".$_SESSION['sql_backup']."'; latestTAR.innerHTML = '".$_SESSION['tarball']."';</script>";
            
            //repopulate relays
            if(E_RELAY !== "Failed"){
                $cwd = getcwd();

                $file = 'mailquota.log';

                $swap = str_replace('content', 'mailquota', $cwd);

                $almost = str_replace('html', $file, $swap);

                $last = substr($almost, 0, strpos($almost, ".log"));

                $fin = $last.'.log';

                $cmd = "grep 'COUNT' $fin | sed 's/\[COUNT\]//g'";

                if (file_exists($fin)){

                    $relays = shell_exec($cmd);

                    $config['E_RELAY'] = $relays;
                }
                
               
               echo "<script>var relay = document.getElementById('relays'); relay.innerHTML = '".E_RELAY."'</script>";
            }
        }

		// Stop all processes by user

		private function killProcesses(){
			$this->logAction("killProcesses");

			shell_exec('pkill -U '.FILEOWNER.';');

			echo $this->display->set_success_box('Processes ran by '.FILEOWNER.' terminated!');

			echo $this->display->del_box();

		}

		// Reset the User Roles

		private function roleReset(){
			$this->logAction("roleReset");

			shell_exec('./wp-cli.phar role reset --all');

			echo $this->display->set_success_box("Roles have been reset!");

			echo $this->display->del_box();

			}

		// Update Plugins

		private function PluginUpdate(){
			$this->logAction("PluginUpdate");

			shell_exec('./wp-cli.phar plugin update --all');

			echo $this->display->set_success_box("Plugins have been updated!");

			echo $this->display->del_box();

			}

		// Update Themes

		private function ThemeUpdate(){
			$this->logAction("ThemeUpdate");

			shell_exec('./wp-cli.phar theme update --all');

			echo $this->display->set_success_box("Themes have been updated!");

			echo $this->display->del_box();

			}
		// Delete ALL Comments - cannot stress this enough. This will also remove approved comments. 
		private function PurgeComms(){
			$this->logAction("Purge_Comments");

			$sql = "\"TRUNCATE \`".PREFIX."commentmeta\`;TRUNCATE \`".PREFIX."comments\`;\"";
			$cmd = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";

			shell_exec($cmd.$sql);

			echo $this->display->set_success_box("Comments have been purged!");

			echo $this->display->del_box();			
		}

		// Delete all comments marked as spam in the db 
		private function PurgeSpam(){
			$this->logAction("Purge_Spam");

			$sql = "\"DELETE FROM \`".PREFIX."comments\` WHERE comment_approved = 'spam';\"";
			$cmd = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";

			shell_exec($cmd.$sql);

			echo $this->display->set_success_box("Comments marked as spam have been purged!");

			echo $this->display->del_box();			
		}

		//Delete any comments that are awaiting moderation (not already approved)
		private function PurgeUnapproved(){
			$this->logAction("Purge_Unapproved");

			$sql = "\"DELETE FROM \`".PREFIX."comments\` WHERE comment_approved = '0';\"";
			$cmd = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";

			shell_exec($cmd.$sql);

			echo $this->display->set_success_box("All comments awaiting moderation have been purged!");

			echo $this->display->del_box();		
		}

		//Optimize MySQL
		private function OptDB(){
			$this->logAction("OptDB");

			$OptDB = "mysqlcheck -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --optimize";

			shell_exec($OptDB);

			echo $this->display->set_success_box("Database tables have been optimized!");

			echo $this->display->del_box();
		}

		//Check/Repair MySQL Tables

		private function RepairDB(){
			$this->logAction("Repair_DB");

			$RepairDB = "mysqlcheck -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." -A --auto-repair";

			shell_exec($RepairDB);

			echo $this->display->set_success_box("Database tables have checked and repaired!");

			echo $this->display->del_box();

		}

	// Create/Updates the gdsupport user
		public function supportUser(){
			$this->logAction("Support_User_Updated");

			$sql = "\"SELECT \`user_login\` FROM \`".PREFIX."users\` WHERE \`user_login\` = 'wpps-support' AND  \`user_email\` = 'wpps-noreply@secureserver.net';\"";
			$cmd = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e ";
			//if the user exits, delete it
			session_start();
			if (strpos(shell_exec($cmd.$sql), 'wpps-support') !== false){
				$updatepass = "./wp-cli.phar user update wpps-support --user_pass='".WPPS_PW."'";
				shell_exec($updatepass);
				$_SESSION['wpps-support'] = $pw;
				
				echo "<script>var element = document.getElementById('supportPass'); element.innerHTML = 'Pass: ".WPPS_PW."';</script>";
				echo $this->display->set_success_box('Copy the user/password quickly: wpps-support | ' . WPPS_PW);
				echo $this->display->del_box();
			}
			//if the user doesn't exist, create it
			else {			
				$cmd = './wp-cli.phar user create wpps-support wpps-noreply@secureserver.net --role=administrator --user_pass="'.WPPS_PW.'"';
				shell_exec($cmd);
				$this->logAction("Support_User_Created");
				echo "<script>var element = document.getElementById('supportPass'); element.innerHTML = 'Pass: ".WPPS_PW."';</script>";
				echo $this->display->set_success_box('Copy the user/password quickly: wpps-support | ' . WPPS_PW);
				echo $this->display->del_box();
				session_start();
				$_SESSION['wpps-support'] = WPPS_PW;
			}
		}

		public function AutoLogin(){
						
			/*** LOADING WORDPRESS LIBRARIES ***/   
			define( 'WP_USE_THEMES', false ); // Do not use the theme files
			define( 'COOKIE_DOMAIN', false ); // Do not append verify the domain to the cookie
			define( 'DISABLE_WP_CRON', true ); // We don't want extra things running...
			include_once("wp-load.php");
			if ( is_user_logged_in() ) {
				$user = wp_get_current_user();
				echo "<script>window.open('".SITE_URL."/wp-admin/', '_blank');</script>";
			}
			else{
				$creds = array();
				$creds['user_login']    = "wpps-support";
				$creds['user_password'] = "'".WPPS_PW."'";
				$creds['remember']      = true;
				$user                   = wp_signon( $creds, false );
				if(is_wp_error( $user )){
					echo $this->display->set_error_box($user->get_error_message());
					echo $this->display->del_box();
				}
				else{
					wp_set_auth_cookie( $user->ID, true );
					echo "<script>window.open('".SITE_URL."/wp-admin/', '_blank');</script>";
				}
			}
		}

		// Clear the transient data from the database

		public function killTransient(){
			$this->logAction("killTransient");

			if($this->fix->get_prefix_list() !== false){

				$this->mySQL->killTransient($this->fix->old_prefix);

				// Put together the commands for lock and mysql

				$cmd = 	$this->lock->updateLock('Clearing cache from database and varnish...').

						$this->mySQL->cmd.

						$this->lock->removeLock();

				shell_exec($cmd);

				$response = $this->display->set_success_box('Cache and transients have been flushed!');

			}else{

				$response = $this->display->set_error_box('An error has occurred while attempting to clear the transient data!');

			}

			echo $response;

			echo $this->display->del_box();

		}


		// Cleans up any / all files related to the script, including the archives and the MySQL dumps

		private function cleanup($directory = '.'){
			$this->logAction("cleanup");

			$remove = '';

			if ($dh = opendir($directory)) {

				while (false !== ($file = readdir($dh)) ){

					// If this appears to be one of the archive remnants, then remove it

					if((strpos($file, ''.TOOL.'-Archive') !== false)||(strpos($file, ''.TOOL.'-SQL') !== false)){

						$remove .= 'rm -f '.$file.';';

					}

				}

				closedir($dh);

			}

			

			return $remove;

		}

		public function database_scan(){
			$this->logAction("database_scan");

			$time = date("_His_mdY");

			$sql = 'SELECT * FROM '.PREFIX.'posts WHERE post_content LIKE "%iframe%" UNION SELECT * FROM '.PREFIX.'posts WHERE post_content LIKE "%noscript%" UNION SELECT * FROM '.PREFIX.'posts WHERE post_content LIKE "%display:%";';

			$file = './wp-content/db_scan.log';

			$cmd = "mysql -B -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." --disable-column-names -e '".$sql."' > ".$file."; echo '\n\n\n\n\n\n\t\t\t\t ****** SCAN COMPLETED @ ".$time." ******' >>  ".$file.";";

			shell_exec($cmd);

				if (file_exists($file)) {

					echo $this->display->set_success_box('<p>Database Scan Complete - please review '.$file.'</p>');

					echo $this->display->del_box();

				}else{

					echo $this->display->set_error_box('<p>An error has occurred while trying to create the output file!</p>');

					echo $this->display->del_box();

				}

		}

		public function sel_db_scan(){
			

			$response = '<span class="glyphicon glyphicon-tasks glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Run Database Scan</p>

			<input type="hidden" name="database_scan" value="false" />';

			return $response;

		}

		

		public function file_scan(){
			$this->logAction("file_scan");

			$time = date("_His_mdY");

			$file = $_SERVER['SCRIPT_FILENAME'];

				$scan = 'echo -e "The following files have been marked for manual review by an automated scan performed by Support. However, as we are not able\nto support custom scripting or the inner workings of third-party applications, we are unable to provide specific solutions.\nTherefore, we respectfully suggest the use of your favorite Internet search engine in order to further research this issue.\n\n*** Please note this scan checks common compromise signatures but that does NOT always mean the file has been compromised *** \n\t \n\t ## FILES FOUND WITH BASE64 CODE ##\n" > ./wp-content/file_scan.log; grep -ri --include=*.php --exclude='.$file.' -lPHn "base64" . >> ./wp-content/file_scan.log; echo -e "\n\t \n\t ## FILES FOUND WITH 46ESAB(base64 backwards) CODE ##\n" >> ./wp-content/file_scan.log; grep -ri --include=*.php --exclude='.$file.' -lPHn "46esab" . >> ./wp-content/file_scan.log; echo -e "\n\t \n\t ## FILES FOUND WITH EVAL CODE ##\n" >> ./wp-content/file_scan.log; grep -ri --include=*.php --exclude=".$file." -lPHn "(eval\(.*\);)" . >> ./wp-content/file_scan.log; echo -e "\n\t \n\t ## FILES FOUND WITH GZINFLATE CODE ##\n" >> ./wp-content/file_scan.log; grep -ri --include=*.php --exclude='.$file.' -lPHn "gzinflate" . >> ./wp-content/file_scan.log; echo -e "\n\t \n\t ## PHP FILES FOUND WITHIN WP-CONTENT/UPLOADS ##\n" >> ./wp-content/file_scan.log; find ./wp-content/uploads -name "*.php" >> ./wp-content/file_scan.log; echo -e "\n\n\n\n\n\n\t\t\t\t ****** SCAN COMPLETED @ '.$time.' ******" >> ./wp-content/file_scan.log;';

		

				shell_exec($scan);

				

				$fscan = './wp-content/file_scan.log';

				if (file_exists($fscan)) {

					$response = $this->display->set_success_box('<p>File Scan Complete - please review '.$fscan.'</p>');

				}else{

					$response = $this->display->set_error_box('<p>An error has occurred while trying to create the output file!</p>');

				}

				echo $response;

				echo $this->display->del_box();

		}

		

		public function sel_f_scan(){

			$response = '<span class="glyphicon glyphicon-folder-open glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Run File Scan</p>

			<input type="hidden" name="file_scan" value="false" />';

			return $response;

			}

			// this tool will mv the wp-config.php file to a backup and generate a new one with the desired values.

		public function wp_debug(){
			$this->logAction("wp_debug");

			function Salty($length = 32) {

			$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

			$string = '';

			for ($i = 0; $i < $length; $i++) {

			$string .= $characters[mt_rand(0, strlen($characters) - 1)];

			}

			return $string;

			}

		

		// Generating values to be used within the config. Put all definitions in 1 line cause it just looked ugly line by line

		$authk = Salty(); $sauthk = Salty(); $logink = Salty(); $noncek = Salty();$asalt = Salty();$sasalt = Salty();$logsalt = Salty();$nonsalt = Salty();
		$debug = "./wp-config.php.".TOOL."-debug-bak".$GLOBALS['time'];

		if ($GLOBALS['ismwp'] == 'true'){
		// define the wp-config file for creation
		$dbconf = "<?php\n/**\n * The base configurations of the WordPress.\n *\n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, and ABSPATH. You can find more information by visiting\n * {@link http://codex.wordpress.org/Editing_wp-config.php Editing wp-config.php}\n * Codex page. You can get the MySQL settings from your web host.\n *\n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to 'wp-config.php' and fill in the values.\n *\n * @package WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine('DB_NAME', '".DB_NAME."');\n\n/** MySQL database username */\ndefine('DB_USER', '".DB_USER."');\n\n/** MySQL database password */\ndefine('DB_PASSWORD', '".DB_PASSWORD."');\n\n/** MySQL hostname */\ndefine('DB_HOST', '".DB_HOST_DEBUG."');\n\n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\ndefine('AUTH_KEY',         '".$authk."');\ndefine('SECURE_AUTH_KEY',  '".$sauthk."');\ndefine('LOGGED_IN_KEY',    '".$logink."');\ndefine('NONCE_KEY',        '".$noncek."');\ndefine('AUTH_SALT',        '".$asalt."');\ndefine('SECURE_AUTH_SALT', '".$sasalt."');\ndefine('LOGGED_IN_SALT',   '".$logsalt."');\ndefine('NONCE_SALT',       '".$nonsalt."');\n\n/**#@-*/\n\n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n\$table_prefix  = '".PREFIX."';\n\n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n */\n// Enable WP_DEBUG mode\ndefine('WP_DEBUG', true); \ndefine('WP_DEBUG_LOG', true); // Enable Debug logging to the /wp-content/debug.log file\ndefine('WP_DEBUG_DISPLAY', false);@ini_set('display_errors',0);\ndefine('SCRIPT_DEBUG', true);\n\n//define( 'WP_CACHE', true );\ninclude_once( dirname( __FILE__ ) . '/gd-config.php' );\ndefine( 'FS_METHOD', 'direct');\ndefine('FS_CHMOD_DIR', (0705 & ~ umask()));\ndefine('FS_CHMOD_FILE', (0604 & ~ umask()));\n\n\n/* That's all, stop editing! Happy blogging. */\n\n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n	define('ABSPATH', dirname(__FILE__) . '/');\n\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');";

		}
		else{
		// define the wp-config file for creation
		$dbconf = "<?php\n/**\n * The base configurations of the WordPress.\n *\n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, and ABSPATH. You can find more information by visiting\n * {@link http://codex.wordpress.org/Editing_wp-config.php Editing wp-config.php}\n * Codex page. You can get the MySQL settings from your web host.\n *\n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to 'wp-config.php' and fill in the values.\n *\n * @package WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine('DB_NAME', '".DB_NAME."');\n\n/** MySQL database username */\ndefine('DB_USER', '".DB_USER."');\n\n/** MySQL database password */\ndefine('DB_PASSWORD', '".DB_PASSWORD."');\n\n/** MySQL hostname */\ndefine('DB_HOST', '".DB_HOST_DEBUG."');\n\n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\ndefine('AUTH_KEY',         '".$authk."');\ndefine('SECURE_AUTH_KEY',  '".$sauthk."');\ndefine('LOGGED_IN_KEY',    '".$logink."');\ndefine('NONCE_KEY',        '".$noncek."');\ndefine('AUTH_SALT',        '".$asalt."');\ndefine('SECURE_AUTH_SALT', '".$sasalt."');\ndefine('LOGGED_IN_SALT',   '".$logsalt."');\ndefine('NONCE_SALT',       '".$nonsalt."');\n\n/**#@-*/\n\n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n\$table_prefix  = '".PREFIX."';\n\n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n */\n// Enable WP_DEBUG mode\ndefine('WP_DEBUG', true); \ndefine('WP_DEBUG_LOG', true); // Enable Debug logging to the /wp-content/debug.log file\ndefine('WP_DEBUG_DISPLAY', false);@ini_set('display_errors',0);\ndefine('SCRIPT_DEBUG', true);\n\n//define( 'WP_CACHE', true );\ndefine( 'FS_METHOD', 'direct');\ndefine('FS_CHMOD_DIR', (0705 & ~ umask()));\ndefine('FS_CHMOD_FILE', (0604 & ~ umask()));\n\n\n/* That's all, stop editing! Happy blogging. */\n\n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n	define('ABSPATH', dirname(__FILE__) . '/');\n\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');";
		}
			//make backup of the current wp-config.php file

			$move = "mv ./wp-config.php ".$debug;

			shell_exec($move);
			
			

			$file = 'wp-config.php';

			$handle = fopen($file, 'w');

			fwrite($handle, $dbconf);

			fclose($handle);
				


			

			if (file_exists($debug)) {

					echo $this->display->set_success_box('<p>WordPress Debugging Enabled - Please review ./wp-content/debug.log</p>');

					echo $this->display->del_box();

				}else{

					echo $this->display->set_error_box('<p>An error has occurred while trying to backup the configuration file!</p>');

					echo $this->display->del_box();
					
				}

		}

		public function sel_wp_debug(){

			$response = '<span class="glyphicon glyphicon-cog glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Enable Debugging Mode</p><p>(WordPress/PHP)</p>

			<input type="hidden" name="wp_debug" value="false" />';

			return $response;

			}

		public function disable_plugins(){

			$sqLogin = "mysql -B -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." -s -N -e '";

			$curPlugins = 'SELECT option_value FROM '.PREFIX.'options WHERE option_name LIKE "active_plugins"\'';

			$curPlug = shell_exec($sqLogin.$curPlugins);

			$disPlug = 'a:0:{}';

			if(trim($curPlug) == $disPlug){

				$response = '<span class="glyphicon glyphicon-ok-circle glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Restore Plugins</p>

			<input type="hidden" name="dis_plugins" value="false" />';

				return $response;

			}else{

			$response = '<span class="glyphicon glyphicon-remove-circle glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Disable Plugins</p>

			<input type="hidden" name="dis_plugins" value="false" />';

			return $response;

			}

		}

		public function dis_plugins(){
			$this->logAction("dis_plugins");

			$time = date("_His_mdY");

			$file = "./support_logs/active_plugins.txt";

			//Didn't feel like cp this all 

			$sqLogin = "mysql -B -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." -s -N -e '";

			$plugins = 'SELECT option_value FROM '.PREFIX.'options WHERE option_name LIKE "active_plugins";';

			$trunc = 'UPDATE '.PREFIX.'options SET option_value = "a:0:{}" WHERE option_name LIKE "active_plugins"';

			

			$curPlugins = $sqLogin.'SELECT option_value FROM '.PREFIX.'options WHERE option_name LIKE "active_plugins"\'';

			

			//Finds out the current state of plugins

			$curPlug = shell_exec($curPlugins);

			

				if(trim($curPlug) != "a:0:{}"){

					//Start with renaming current active plugs

					$unPlug   = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-active_plugins-toggled" WHERE option_name = "active_plugins"\'';

					shell_exec($unPlug);

					//Create our active plugins

					$MyPlug = $sqLogin.'INSERT INTO '.PREFIX.'options(option_id, option_name, option_value, autoload) VALUES (LAST_INSERT_ID( ), "active_plugins", "a:0:{}", "yes");\''; 

					shell_exec($MyPlug);

				}else{

					$checkMyPlug = $sqLogin.'SELECT option_name FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-active_plugins-toggled"\'';

					$checkFP = shell_exec($checkMyPlug);

					if(!empty($checkFP) && $checkFP != NULL){

						

						//Move our tracks

						$mvMyPlug = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-active_plugins-remove" WHERE option_name = "active_plugins"\'';

						shell_exec($mvMyPlug);

						

						//Restore their plugins

						$rePlug = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "active_plugins" WHERE option_name = "'.TOOL.'-active_plugins-toggled"\'';

						shell_exec($rePlug);

						

						//Remove our tracks

						$unMyPlug = $sqLogin.'DELETE FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-active_plugins-remove"\'';

						shell_exec($unMyPlug);

					}

				}

			}

		

		public function default_theme(){

			//Find the current Template and Stylesheet

			$sqLogin = "mysql -B -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." -s -N -e '";

			$defaultTheme = 'twentytwenty';	

			$checkTemplate  = $sqLogin.'SELECT option_value FROM '.PREFIX.'options WHERE option_name LIKE "template"\'';

			$checkStyle = $sqLogin.'SELECT option_value FROM '.PREFIX.'options WHERE option_name LIKE "stylesheet"\'';

			$curTemp  = shell_exec($checkTemplate);

			$curStyle = shell_exec($checkStyle);

			

			/////////////////////////////////////////

			$checkMyTemp  = $sqLogin.'SELECT option_name FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-template-toggled"\'';

			$checkFT = shell_exec($checkMyTemp);

				if($checkFT != NULL ){

				$response = '<span class="glyphicon glyphicon-ok-circle glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Restore Theme</p>

			<input type="hidden" name="dis_theme" value="false" />';

				return $response;

			}else{

				$response = '<span class="glyphicon glyphicon-home glyphicon-size-massive" aria-hidden="true"></span>

			<p class="medium">Set Default Theme</p>

			<input type="hidden" name="dis_theme" value="false" />';

				return $response;

			}

		}

		public function dis_theme(){
			$this->logAction("dis_theme");

						

			//Find the current Template and Stylesheet   -- BKU Theme defaulter should be rewritten for CLI

			$sqLogin = "mysql -B -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' ".DB_NAME." -P".DB_PORT." -s -N -e '";

			$defaultTheme = 'twentytwenty';	

			$template  = $sqLogin.'SELECT option_value FROM '.PREFIX.'options WHERE option_name = "template" \'';

			$style = $sqLogin.'SELECT option_value FROM '.PREFIX.'options WHERE option_name = "stylesheet" \'';

			$curTemp  = shell_exec($template);

			$curStyle = shell_exec($style);

			/////////////////////////////////////////

			

			if(trim($curTemp) != $defaultTheme && trim($curStyle) != $defaultTheme){//open1

				$MyTemp  = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-template-toggled" WHERE option_name LIKE "template" \'';

				$MyStyle = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-stylesheet-toggled" WHERE option_name LIKE "stylesheet" \'';

				$MyDefTemp  = $sqLogin.'INSERT INTO '.PREFIX.'options(option_id, option_name, option_value, autoload) VALUES (LAST_INSERT_ID( ), "template", "twentytwenty", "yes");\'';	

				$MyDefStyle = $sqLogin.'INSERT INTO '.PREFIX.'options(option_id, option_name, option_value, autoload) VALUES (LAST_INSERT_ID( ), "stylesheet", "twentytwenty", "yes");\'';

				shell_exec($MyTemp);

				shell_exec($MyStyle);

				shell_exec($MyDefTemp);

				shell_exec($MyDefStyle);

				

				$dtheme = "twentytwenty-".TOOL.".zip";

				$move ="mv ./wp-content/themes/twentytwenty ./wp-content/themes/twentytwenty.bak;";

				$wget = "wget https://downloads.wordpress.org/theme/twentytwenty.1.1.zip; unzip twentytwenty.1.1.zip -d ./wp-content/themes/";

				$theme = "./wp-content/themes/twentytwenty";

		

				if (file_exists($dtheme)) {

					//no duplicates - don't trust anyone. Download new.

					$bye = "rm twentytwenty.1.1.zip";

					shell_exec($bye);

				}

				if (file_exists($theme)) {

					shell_exec($move);

					shell_exec($wget);

				}else{

					shell_exec($wget);

				}

			//close1	

			}else{

			//Now we undo everything we've done


					$checkMyTemp  = $sqLogin.'SELECT option_id FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-template-toggled"\'';

					$checkMyStyle = $sqLogin.'SELECT option_id FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-stylesheet-toggled"\'';

					$checkFT = shell_exec($checkMyTemp);

					$checkFS = shell_exec($checkMyStyle);

					if(checkFS != NULL && $checkFT != NULL){

						//Move our tracks

						$mvTemp  = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-template-remove" WHERE option_name LIKE "template" \'';

						$mvStyle = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "'.TOOL.'-stylesheet-remove" WHERE option_name LIKE "stylesheet" \'';

						shell_exec($mvTemp);

						shell_exec($mvStyle);						

						

						//Restore their temp and style

						$reTemp  = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "template" WHERE option_name = "'.TOOL.'-template-toggled"\'';

						$reStyle = $sqLogin.'UPDATE '.PREFIX.'options SET option_name = "stylesheet" WHERE option_name = "'.TOOL.'-stylesheet-toggled"\'';

						shell_exec($reTemp);

						shell_exec($reStyle);

						

						//Remove our tracks

						$unMyTemp  = $sqLogin.'DELETE FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-template-remove" \'';

						$unMyStyle = $sqLogin.'DELETE FROM '.PREFIX.'options WHERE option_name = "'.TOOL.'-stylesheet-remove" \'';

						shell_exec($unMyTemp);

						shell_exec($unMyStyle);

				}

			}

		}
		
		public function logAction($action){
			$cuser= "Managed Services";
			$time = date("Y-m-d H:i:s");
			$log = "./.wpc.log";

			$cmd =  "echo -en '[".$time."] U: ".$cuser." - Cmd: ".$action."\n' >> ".$log."\n";
			shell_exec($cmd);
			return;
		}

	}

/******************************************************

					LockFile Class

					--------------

- Returns the commands necessary for locks on certain processes

	- updateLock	->	Updates the lock file with process name

	- removeLock	->	Removes the lock file

******************************************************/

	class lockFile {

		private $lockfile = '';

		

		public function __construct(){

		$directory = dirname($_SERVER['SCRIPT_FILENAME']);

			$this->lockfile = $directory.'/'.TOOL.'lock';

		}

		

		public function updateLock($process = ''){

			if(!empty($process)){

				return 'echo "'.$process.'" > '.$this->lockfile.';';

			}

		}

		

		public function removeLock(){

			return 'rm -f '.$this->lockfile.';';

		}

	}

	

/******************************************************

					iniGenerator Class

					------------------

- Creates an ini file after backing up a pre-existing ini if necessary

	- generate		->	Create the appropriate INI based on constructor

	- backupINI		->	Backup active INI file as *.ini-backup

******************************************************/

	class iniGenerator{

		private $phpconfig = array();

		public $filename = '';

		

		// Assemble the data

		public function __construct($data){

			$directory = $_SERVER['DOCUMENT_ROOT'];

			$this->filename = $directory.'/'.$data['ini_select']; // #BKU

			

			foreach($data as $k => $v){

				// Construct the keys based on the prefix

				if(strpos($k, 'php_') !== false){

					$key = substr($k, 4);

					$this->phpconfig[$key] = $v;

				}

			}

		}

		

		// Create the INI

		public function generate(){

			if($this->backupINI()){

				$content = '';

				

				foreach($this->phpconfig as $k => $v){

					$content .= 'echo "'.$k.' = '.$v.'" >> '.$this->filename.';';

				}

				

				shell_exec('touch '.$this->filename.' && '.$content);

				if(file_exists($this->filename)){

					return true;

				}else{

					return false;

				}

			}else{

				return false;

			}

		}

		

		private function backupINI(){

			// Backup any pre-existing ini files

			if(file_exists($this->filename)){

				if(rename($this->filename, $this->filename.'-backup')){

					return true;

				}else{

					return false;

				}

			// No backup necessary

			}else{

				return true;

			}

		}

	}

	

/******************************************************

					Archive Class

					-----------------

- Manages connections to the database and sanitizes input

	__construct(object, object)

	select_archive()

	create_archive()

	unpack_all_archives(string, bool)

******************************************************/

	class MyArchive{

		private $fix;		// Fix the things object

		private $mySQL;		// MySQL object

		public $cmd;		// Command generated by create / restore

		public $lock;		// Lock class

		

		public function __construct($fix = '', $mySQL = ''){

			$this->fix = (empty($fix) ? false: $fix);

			$this->mySQL = (empty($mySQL) ? false : $mySQL);

			

			

			if((!$this->fix)||(!$this->mySQL))

				die('An error has occurred in the '.TOOL.' archives!');

		}

		

		/*

		select_archive()

		--------------

		- Retrieves a list of archives within the immediate directory

		--------------

		*/

		public function select_archive(){

			$directory = dirname($_SERVER['SCRIPT_FILENAME']);

			$archive_list = array();

			$allowed = array(

				'.tar',

				'.zip',

				'.gz',

				'.tar',

				'.bz2'

			);

			

			// Time to open the directory and look for archives!

			if(is_dir($directory)){

				if ($dh = opendir($directory)) {

					while (false !== ($file = readdir($dh)) ){

						foreach($allowed as $check){

							if(!in_array($file, $archive_list)){

								if((strpos($file, $check) !== false)&&(strpos($file, '.sql') === false)){

									$archive_list[] = $file;

								}

							}

						} // END FOREACH

					}

					closedir($dh);

				}

			}

			return $archive_list;

		}

		/*

		create_archive()

		--------------

		- Create the MySQL backup in wp-content/ then tarball the dir

		--------------

		*/

		public function create_archive(){

			$fdom = $_SERVER['HTTP_HOST'];

			$dom = str_replace(".","_", $fdom);

			$time = date("_His_mdY");

			$filename = ''.TOOL.'-Archive_'.$dom.''.$time.'.tar.gz';

			// Fire off a MySQL backup in wp-content/

			$this->cmd = 'tar -zcf '.$filename.' ./wp-content/;if [[ $? -ne 0 ]];then mv '.$filename.' '.$filename.'-incomplete;echo "Archive Creation Failed" >> ./.wpc.log;else echo "Archive Creation Success" >> ./.wpc.log;fi;';

			

			return $filename;

		}

		

		/*

			unpack_all_archives(string)

			--------------

			- Extracts an archive of content

			--------------

		*/

		public function unpack_all_archives($archive_backup = '', $import){

			

			// Break the backup out by . which determines how many . there are

			$match = explode('.', $archive_backup);

			$numFound = count($match);

			$ext = array();

			$cmd = false;

			

			// Determine potential file extensions / alternate variation

			switch(true){

				default:

				case ($numFound <= 1):

					break;

				// One potential found

				case ($numFound == 2):

					$ext[0] = '.'.$match[1];

					break;

				// One - many potential extensions found, so set extAlt

				case ($numFound <= 3):

					$ext[0] = '.'.$match[$numFound - 1];

					$ext[1] = '.'.$match[$numFound - 2].$ext[0];

					// Reverse the array to test with the combination first

					$ext = array_reverse($ext);

					break;

			}

			

			// File was not made by the script - check other archive types

			if(!empty($ext)){

				// Loop through to check for an extension match

				foreach($ext as $extension){

					if(!$cmd){

						// Perform the necessary BASH commands to extract data 

						switch($extension){

							case '.tar.gz':

							case '.tgz':

								$cmd = 'tar -xzf ';

								break;

							case '.gz':

								$cmd = 'gunzip -d < ';

								break;

							case '.zip':

								$cmd = 'unzip ';

								break;

							case '.tar':

								$cmd = 'tar -xf ';

								break;

							case '.bz2':

								$cmd = 'bunzip2 ';

								break;

						}

					}

				}// END FOREACH

			}

			

			if($cmd){

				// Extract the archive

				$check = ';if [[ $? -ne 0 ]];then echo "Archive Extraction Failed" >> ./.wpc.log;else echo "Archive Extraction Success" >> ./.wpc.log;fi;';
				$this->cmd .=  "".$cmd."'".$archive_backup."'".$check."";

				return true;

			}else{

				return false;

			}

		}

		

	}

	

/******************************************************

					Database Class

					--------------

- Manages connections to the database for updates

	- connect()

	- run(string)		->	Run a query that fetches single result

	- runAll(string)	->	Run a query that fetches ALL results

	- disconnect()

******************************************************/

	class wpaas_connection {

		public $pdo;				// PDO connection

		public $query;				// MySQL query

		private $bind = array();	// Used for binding params

		protected $table;			// Table to update

		

		public function __construct(){}

		

		public function __destruct(){

			if($this->pdo !== null)

				$this->disconnect();

		}

		

		public function connect(){

			$dsn = 'mysql:host='.DB_HOST.';port='.DB_PORT.';dbname='.DB_NAME;

			try{

				$this->pdo = new PDO($dsn, DB_USER, DB_PASSWORD);

			}catch(PDOException $e){

				die('There is an error in the wp-config file! Connection failed: '.$e->getMessage());

			}

		}

	

		public function run($sql = ''){

			$this->connect();

			$query = $this->pdo->prepare($sql);

			$result = $query->execute();

			$result = $query->fetch(PDO::FETCH_ASSOC);

			

			return $result;

		}

		

		public function runAll($sql = ''){

			$this->connect();

			$query = $this->pdo->prepare($sql);

			$result = $query->execute();

			$result = $query->fetchAll(PDO::FETCH_ASSOC);

			

			return $result;

		}

		

		public function disconnect(){

			$this->pdo = null;

		}	

	}

/******************************************************

					mysqlStuffs Class

					--------------

- Performs the actions for all MySQL database interactions

regarding backups (select, create, restore)

******************************************************/

	class mysqlStuffs{

		public $mysqlBackup = '';

		public $cmd = '';

		

		/*

		create_sql_backup()

		--------------

		Create the SQL backup with _date_time stamp

		

		Returns filename on success or false on failure

		--------------

		*/

		public function create_sql_backup($dir = ''){

			$time = date("_His_mdY");

			// Create the backup based on the name of the database and time of the backup

			$filename = ''.TOOL.'-SQL_'.DB_NAME.$time.'.sql';

			

			$this->cmd = "mysqldump -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' -P ".DB_PORT." ".DB_NAME." > ";

			

			// If the directory isn't empty, then this is a tarball. Format the directory if it exists.

			if(!empty($dir)){

				$dir = $this->formatDir($dir);

				if($dir !== false){

					$filename = $dir.'/'.$filename;

				}else{

					return false;

				}

			}else{

				$_SESSION['sql_backup'] = $filename;

			}

			
			$check = ';if [[ $? -ne 0 ]];then echo "MySQL Backup Failed" >> ./.wpc.log;else echo "MySQL Backup Success" >> ./.wpc.log;fi;';
			$this->cmd .= $filename.$check;

			

			return $filename;

		}

		

		/*

			select_sql_backup()

			--------------

			Extracts list of SQL files in current directory, including gz and zip

			--------------

		*/

		public function select_sql_backup($directory = ''){

			if(empty($directory))

				$directory = dirname($_SERVER['SCRIPT_FILENAME']);

				$contdir = $directory.'/wp-content/';

			

			$file_list = array();

			$contsql = array();

			// Time to open the directory and look for SQL backups!

			if(is_dir($directory)){

				// Check current directory

				if ($dh = opendir($directory)) {

					while (false !== ($file = readdir($dh)) ){

						if(strpos($file, '.sql'))

							$file_list[] = $file;

					}

					closedir($dh);

				}

				

			}

			// Time to open the wp-content directory and look for MOAR SQL backups!

			/* if(is_dir($contdir)){

				// Check current directory

				if ($cdh = opendir($contdir)) {

					while (false !== ($file = readdir($cdh)) ){

						if(strpos($file, '.sql'))

							$contsql[] = $file;

					}

					closedir($cdh);

				}

				

			}

			$fileResults = array_merge($file_list, $contsql); */

			return $file_list;

		}

		

		/*

			restore_sql_backup(string)

			--------------

			- Extracts the backup to a temporary file if necessary

			- Imports the database backup

			- Removes the temporary file if created

			--------------

		*/

		public function restore_sql_backup($sql_backup){

			$precmd = '';

			

			// Check to see if the file contains .sql; otherwise it is the .tar.gz outlier

			$sql_check =  strpos($sql_backup, '.sql');

			if(!$sql_check){

				$ext = '.tar.gz';

			}else{

				$ext = substr($sql_backup, $sql_check);

			}

			

			// Staged SQL file that will be removed

			$base_name = str_replace($ext, '', $sql_backup).'_'.TOOL.'.sql';
			$base_name = str_replace(' ','', $base_name);
			

			// Drop all tables first and then import the database

			$auth = "mysql -h ".DB_HOST." -u ".DB_USER." -p'".DB_PASSWORD."' -P ".DB_PORT." ".DB_NAME;

			

			$drop = "SET FOREIGN_KEY_CHECKS = 0; SET @tables = NULL; SELECT GROUP_CONCAT(table_schema, '.', table_name) INTO @tables FROM information_schema.tables WHERE table_schema = '".DB_NAME."'; SET @tables = CONCAT('DROP TABLE IF EXISTS ', @tables); PREPARE stmt FROM @tables; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET FOREIGN_KEY_CHECKS = 1;";

			$cmd =  $auth."< ./";

			

			// File is archive, so we should extract it first

			if($ext !== '.sql'){

				// Perform the necessary BASH commands to extract data if necessary

				switch($ext){

					case '.sql.tgz':

						$precmd = '';

						break;

					case '.sql.gz':

						$precmd = "gunzip -dc < ".$sql_backup;

						break;

					case '.sql.zip':

						$precmd = 'unzip -p '.$sql_backup;

						break;

					case '.tar.gz':

						$precmd = 'tar -xzOf '.$sql_backup;

						break;

				}

				

				// automagically comment out CREATE DATABASE and USE lines if present, then extract output to new .sql file.

				$precmd .= " | sed 's/CREATE DATABASE/-- CREATE DATABASE/g' | sed 's/USE/-- USE/g' >> ./".$base_name.' ; ';

			

			// Regular SQL file

			}else{

				$precmd = "sed 's/CREATE DATABASE/-- CREATE DATABASE/g' ./".$sql_backup." | sed 's/USE/-- USE/g' >> ./".$base_name.' ; ';

			}

			

			// Remove the unnecessary file

			$postcmd = '; rm -f ./'.$base_name.';';

						

			$this->cmd = $auth.' -e "'.$drop.'" ; '.$precmd.$cmd.$base_name.$postcmd;

		}

		/* 

			Clears the transient data from the options table in the Presses of the Word

			Defaults to the prefix found in the wp_config file

		*/

		public function killTransient(){
			if ($GLOBALS['ismwp'] == 'true'){
				$cmd = 'wp godaddy cache flush;./wp-cli.phar transient delete-expired;';
				$xban = "curl -XBAN ".SITE_URL."";
				shell_exec($xban);
				shell_exec($cmd);


			}

			else{
				$cmd = './wp-cli.phar cache flush;./wp-cli.phar transient delete-expired;';
				shell_exec($cmd);

			}
		}

		public function locate_own_sql(){

			$needle = ''.TOOL.'-SQL_';

			$directory = 'wp-content';

			$sql_backup = '';

			// Check for the MySQL backup within wp-content

			if(is_dir($directory)){

				if($dh = opendir($directory)){

					while(false !==($file = readdir($dh))){

						if((strpos($file, $needle) !== false)&&(empty($sql_backup))){

							return 'wp-content/'.$file;

						}

					}

				}

			}

			return false;

		}

		

		// Formats the directory structure for uniformity in methods

		private function formatDir($directory){

			// If directory reference ends with /, remove it to check if directory exists

			if(substr($directory, -1) === '/')

				$directory = substr($dir, 0, -1);

			// Remove any leading slashes

			if(substr($directory, 0, 1) === '/')

				$directory = substr($directory, 1);

			// Just to be certain, check to see if the directory is actually a directory

			if(is_dir($directory)){

				return $directory;

			}else{

				return false;

			}

		}

	}

/******************************************************

				Fix Everything Class

				--------------------

- So we still need PDO / MySQLi / MySQL to return the tables and to parse the prefixes

- Right now we can do the updates over shell, as they do not require any verification

-------

Methods

-------

	get_prefix_list()

	get_table_list()

	rename_tables()	

	fix_usermeta()

	fix_options()

	screen_wp(string)

	get_url()

	set_url()

	table_check()

******************************************************/

	class fix_things {

		public $new_prefix = '';			// The desired prefix for the tables

		public $old_prefix = '';			// The old prefix being changed

		public $good_tables = array();		// Tables associated with the old prefix

		public $prefix_array = array();		// Prefixes in database that do not match the old prefix

		private $pdo = null;				// PDO wpaas_connection object

		public $display;					// Display object

		

		public function __construct(){

			$this->pdo = new wpaas_connection();

			$this->display = new display();

		}

		

		/*

			get_prefix_list()

			--------------

			Sets the prefix_array based on parsing the _usermeta from the database

			--------------

			TODO:

			- Sanitize $new_prefix input with bindparams

			- After getting a prefix list, test by searching for site url in the prefix list to finalize

		*/

			

		public function get_prefix_list(){

			$sql = "SHOW TABLES LIKE '%_usermeta'";

			$result = $this->pdo->run($sql);

			$this->pdo->disconnect();

			// If the count is greater than 1 deep in the array (multiple usermeta), then prefix will be false. Otherwise it will assign the old prefix.

			if((count($result) > 1)||(empty($result)))

				$this->old_prefix = false;

			else

				$this->old_prefix = str_replace('usermeta', '', reset($result));

			

			return $this->old_prefix;

		}

		

		/*

			get_table_list(string)

			--------------

			Get affected tables specific to a prefix

			--------------

		*/

		private function get_table_list(){

			

			// Check to see if the old prefix has been sorted yet

			if(empty($this->old_prefix)){

				$this->get_prefix_list();	// Get prefix list for prefix_array check

			}

						

			// Get the table list so long as multiple usermeta tables are not detected

			$sql = "SELECT table_name FROM information_schema.tables WHERE table_schema = '".DB_NAME."'  AND table_name LIKE '".$this->old_prefix."%'";

			if($this->old_prefix !== false){

				// NOT LIKE condition will exclude all tables if either condition = wp_

				$sql .= $this->screen_wp('table_name');

				// Get the targeted tables that we will use to rename to the proper prefix

				$table_array = $this->pdo->runAll($sql);

				$this->pdo->disconnect();

				

				// Tables return as a 2D array

				foreach($table_array as $database => $nested){

					foreach($nested as $k => $table){

						if(!in_array($table, $this->good_tables)){

							$this->good_tables[] .= $table;

						}

					}

				}

			}

		}

		

		/*

			rename_tables()

			--------------

			Renames the tables on the database

			--------------

		*/

		public function rename_tables(){

			if($this->old_prefix !== false){

				$this->get_table_list();

				$this->new_prefix = PREFIX;

				$sql = 'RENAME TABLE ';

						

				// Construct the SQL statement to rename

				foreach($this->good_tables as $tbl){

					$tbl_name = preg_replace('/'.$this->old_prefix.'/', '', $tbl, 1);

					$b_value = $this->new_prefix.$tbl_name;

	

					$sql .= $tbl.' TO '.$b_value.', ';

				}

	

				// Clean up the SQL statement to remove the , and space from the end.

				$sql = substr($sql, 0, -2);

		

				$this->pdo->run($sql);

				

				// Now begin updating the other values in the database

				$this->fix_usermeta();

				$this->fix_options();

				

				$this->pdo->disconnect();

				

				return true;

			}else{

				return false;

			}

		}

		

		/*

			fix_usermeta()

			--------------

			Fixes usermeta prefixes based on old prefix

			--------------

		*/

		private function fix_usermeta(){

			$table = $this->new_prefix."usermeta";

			

			$sql = "UPDATE ".$table." SET meta_key = REPLACE (meta_key, '".$this->old_prefix."', '".PREFIX."') WHERE meta_key LIKE '".$this->old_prefix."%'";

			

			$sql .= $this->screen_wp('meta_key');

			

			$this->pdo->run($sql);

			$this->pdo->disconnect();

			

			}

			/*

			fix_options()

			--------------

			Fixes specific options prefixes

			--------------

			TODO:

			- Add in return value based on SQL execution

		*/

		private function fix_options(){

			$table = $this->new_prefix."options";

			$sql = "UPDATE ".$table." SET option_name = REPLACE (option_name, '".$this->old_prefix."', '".PREFIX."') WHERE option_name LIKE '".$this->old_prefix."%'";

			

			$sql .= $this->screen_wp('option_name');

			

			$this->pdo->run($sql);

		}

		

		// Simple method that screens the prefixes for wp_ logic matching and constructs SQL based on result

		private function screen_wp($key){

			$sql = '';

			if(($this->old_prefix !== 'wp_')&&(PREFIX !== 'wp_')&&($this->old_prefix !== PREFIX)){

				$sql .= " AND ".$key." NOT LIKE '".PREFIX."%'";

			}

			

			return $sql;

		}

		

		/*

			get_url()

			--------------

			Gets the current active URL on the database

			--------------

			TODO:

			- Chain URL to prefix if multiple prefixes exist

		*/

		public function get_url(){

			

			// Get the prefix list first. If multiple exist for options, then break and tell rep to drop tables.

			if(empty($this->old_prefix))

				$this->get_prefix_list();

			

			// Return false if mutiple wp_usermeta tables exist

			if($this->old_prefix === false){

				return false;

			}else{

				// $this->new_prefix is only assigned when the tables are updated

				$prefix = (empty($this->new_prefix) ? $this->old_prefix : $this->new_prefix);

				// Get the siteurl

				$sql = "SELECT option_value FROM ".$prefix."options WHERE option_name =  'siteurl'";

						

				$result = $this->pdo->run($sql);

				$this->pdo->disconnect();

				

				/* if(!empty($result))

					$response = (is_array($result) ? $result[0] : $result);

				else

					$response = false; */

				if(!empty($result))

					$result = reset($result);

				else

					$result = false;

							

				return $result;

			}

			

		}

		

		/*

			set_url()

			--------------

			Updates the site URL

			--------------

		*/

		public function set_url(){

			// Since the new prefix is only set in rename tables, it will only use new prefix if tables have changed

			if(!empty($this->new_prefix))

				$prefix = $this->new_prefix;

			else

				$prefix = $this->old_prefix;

				

			// Site URL Update

			$sql = 	"UPDATE ".$prefix."options SET option_value = '".SITE_URL."' WHERE option_name = 'siteurl';

					UPDATE ".$prefix."options SET option_value = '".SITE_URL."' WHERE option_name = 'home';";

			$this->pdo->run($sql);

			$this->pdo->disconnect();

		}

		/*

			table_check()

			--------------

			Verifies that all necessary tables exist for WordPress

			--------------

		*/

		public function table_check(){

			// List of default WordPress tables

			$required_tables = array(

							'commentmeta', 

							'comments', 

							'links', 

							'options', 

							'postmeta', 

							'posts', 

							'terms', 

							'term_relationships', 

							'term_taxonomy', 

							'usermeta', 

							'users'

			);

			

			// Show tables to compare with normal WordPress tables

			$sql = 'SHOW TABLES;';

			$result = $this->pdo->runAll($sql);

			$this->pdo->disconnect();

			

			// Checks the database results and compares it with the required tables

			foreach($result as $key => $database){

				foreach($database as $k=> $dbtable){

					foreach($required_tables as $rk => $table){

						// If it locates the required table, it removes it from the array

						if(strpos($dbtable, $table) !== false)

							unset($required_tables[$rk]);

					}

				}

			}

			

			// If tables are empty and we can get the site url, then return true

			if(empty($required_tables)){

				if($this->get_url() !== false)

					return true;

			}

			

			// Otherwise return false

			return false;	

		}	

		

	}
// END FRAMEWORK

/******************************************************

				Begin Procedural Logic

******************************************************/

// Fire the Get Started data

$get_started = new get_started();

// Selector for restoring SQL backups and displaying current prefixes




// Check if this is an AJAX response:

if(!isset($_POST['selector'])){

/******************************************************

				Begin HTML Output

******************************************************/

// May eventually change this to use ob_start / ob_get_clean, though is not necessary for this implementation

?>



			<!DOCTYPE html>

			<html lang="en">

			<head>

				<meta charset="utf-8">

				<meta http-equiv="X-UA-Compatible" content="IE=edge">

				<meta name="viewport" content="width=device-width, initial-scale=1">

				<title><?=TOOL;?> - a tool for WordPress</title>



				<!-- Bootstrap -->

				<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">



				<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->

				<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->

				<!--[if lt IE 9]>

		  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>

		  <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>

		<![endif]-->

				<style>
					@font-face {
						font-family: Walsheim-Light;
						font-style: normal;
						font-weight: 400;
						src: url(//img1.wsimg.com/ux/fonts/1.0/eot/w3.eot?#iefix) format("embedded-opentype"), url(//img1.wsimg.com/ux/fonts/1.0/woff/w3.woff) format("woff"), url(//img1.wsimg.com/ux/fonts/1.0/ttf/w3.ttf) format("truetype")
					}
					
					@font-face {
						font-family: Walsheim-Regular;
						font-style: normal;
						font-weight: 400;
						src: url(//img1.wsimg.com/ux/fonts/1.0/eot/w4.eot?#iefix) format("embedded-opentype"), url(//img1.wsimg.com/ux/fonts/1.0/woff/w4.woff) format("woff"), url(//img1.wsimg.com/ux/fonts/1.0/ttf/w4.ttf) format("truetype")
					}
					
					@font-face {
						font-family: Walsheim-Medium;
						font-style: normal;
						font-weight: 400;
						src: url(//img1.wsimg.com/ux/fonts/1.0/eot/w5.eot?#iefix) format("embedded-opentype"), url(//img1.wsimg.com/ux/fonts/1.0/woff/w5.woff) format("woff"), url(//img1.wsimg.com/ux/fonts/1.0/ttf/w5.ttf) format("truetype")
					}
					
					@font-face {
						font-family: Walsheim-Bold;
						font-style: normal;
						font-weight: 400;
						src: url(//img1.wsimg.com/ux/fonts/1.0/eot/w7.eot?#iefix) format("embedded-opentype"), url(//img1.wsimg.com/ux/fonts/1.0/woff/w7.woff) format("woff"), url(//img1.wsimg.com/ux/fonts/1.0/ttf/w7.ttf) format("truetype")
					}
					
					@font-face {
						font-family: Walsheim-Black;
						font-style: normal;
						font-weight: 400;
						src: url(//img1.wsimg.com/ux/fonts/1.0/eot/w8.eot?#iefix) format("embedded-opentype"), url(//img1.wsimg.com/ux/fonts/1.0/woff/w8.woff) format("woff"), url(//img1.wsimg.com/ux/fonts/1.0/ttf/w8.ttf) format("truetype")
					}
					
					h1,
					h2,
					h3,
					.h1,
					.h2,
					.h3 {
						font-family: "Walsheim-Black";
					}
					
					h4,
					h5,
					h6,
					.h4,
					.h5,
					.h6 {
						font-family: "Walsheim-Medium";
					}
					
					p {
						font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
					}
					
					label,
					.list-group-item,
					.list-group-item-text {
						font-family: "Walsheim-Regular";
					}
					
					.alert {
						border-radius: 0;
						z-index: 99999;
					}
					
					.alert-success {
						text-align: center;
						z-index: 99999;
						position: absolute;
						margin: 1% 10% 20px 10%;
						width: 75%;
						border: 10px solid #333;
					}
					
					.btn {
						font-family: "Walsheim-Medium", Arial, sans-serif;
					}
					
					body {
						background-color: #e8e8e8;
					}
					
					.update-notice {
						border-radius: 0;
						margin-bottom: 0;
					}
					
					.col-no-pad {
						padding: 0;
					}
					
					.my-navbar {
						background-color: #1d6ccd;
						border-radius: 0;
						border: none;
					}
					
					.navbar-danger {
						background-color: #f44242;
						border-radius: 0;
						border: none;
					}
					
					.navbar-brand {
						color: #FFF;
					}
					
					.navbar-brand:hover,
					.navbar-brand:focus {
						outline: 0;
						color: #FFF;
						background-color: #3B90F7;
					}
					
					#main-content {
						font-family: "Helvetica Neue", "Segoe UI", Segoe, Helvetica, Arial, "Lucida Grande", sans-serif;
					}
					
					.btn-default,
					.btn-default:hover,
					.btn-default:focus,
					.btn-default:active,
					.btn-default.active,
					.open .dropdown-toggle.btn-default {
						margin: 5px 3px;
						background-color: #13488A;
						border-radius: 0;
						color: #333;
						font-weight: bold;
						border-bottom: 4px solid #333;
					}
					
					.btn-default.disabled,
					.btn-default[disabled],
					fieldset[disabled] .btn-default,
					.btn-default.disabled:hover,
					.btn-default[disabled]:hover,
					fieldset[disabled] .btn-default:hover,
					.btn-default.disabled:focus,
					.btn-default[disabled]:focus,
					fieldset[disabled] .btn-default:focus,
					.btn-default.disabled:active,
					.btn-default[disabled]:active,
					fieldset[disabled] .btn-default:active,
					.btn-default.disabled.active,
					.btn-default.active[disabled],
					fieldset[disabled] .btn-default.active {
						background-color: #CCC;
					}
					
					.btn-default:hover,
					.btn-default:focus,
					.btn-default:active,
					.btn-default.active,
					.open .dropdown-toggle.btn-default {
						background-color: #333;
					}
					
					.btn-primary,
					.btn-primary:hover,
					.btn-primary:focus,
					.btn-primary:active,
					.btn-primary.active,
					.open .dropdown-toggle.btn-primary {
						background-color: #13488A;
						color: #FFF;
						font-weight: bold;
					}
					
					.btn-primary.disabled,
					.btn-primary[disabled],
					fieldset[disabled] .btn-primary,
					.btn-primary.disabled:hover,
					.btn-primary[disabled]:hover,
					fieldset[disabled] .btn-primary:hover,
					.btn-primary.disabled:focus,
					.btn-primary[disabled]:focus,
					fieldset[disabled] .btn-primary:focus,
					.btn-primary.disabled:active,
					.btn-primary[disabled]:active,
					fieldset[disabled] .btn-primary:active,
					.btn-primary.disabled.active,
					.btn-primary.active[disabled],
					fieldset[disabled] .btn-primary.active {
						background-color: #CCC;
					}
					
					.btn-primary:hover,
					.btn-primary:focus,
					.btn-primary:active,
					.btn-primary.active,
					.open .dropdown-toggle.btn-primary {
						background-color: #333;
					}
					
					.nav>li>a:hover,
					.nav>li>a:focus,
					.nav-pills>li.active>a,
					.nav-pills>li.active>a:hover,
					.nav-pills>li.active>a:focus {
						background-color: #1d6ccd;
						color: #FFF;
						outline: none;
					}
					
					.btn-info {
						border-color: #000;
						background-color: #333;
						border-radius: 0;
						font-size: 18px;
						line-height: 20px;
						margin: 0;
						padding: 15px 0;
						width: 100%;
					}
					
					.btn-info:hover,
					.btn-info:focus,
					.btn-info:active,
					.btn-info.active,
					.open .dropdown-toggle.btn-info {
						background-color: #13488A;
						border-color: #000;
					}
					
					.btn-inf {
						border-color: #000;
						background-color: #13488A;
						border-radius: 0;
						font-size: 18px;
						line-height: 20px;
						margin: 0;
						padding: 15px 0;
						width: 100%;
					}
					
					.btn-inf:hover,
					.btn-info:focus,
					.btn-info:active,
					.btn-info.active,
					.open .dropdown-toggle.btn-info {
						background-color: #333;
						border-color: #000;
					}
					
					.btn-danger {
						border-color: #000;
						background-color: #333;
						border-radius: 0;
						font-size: 18px;
						line-height: 20px;
						margin: 0;
						padding: 15px 0;
						width: 100%;
					}
					
					.btn-danger:hover,
					.btn-danger:focus,
					.btn-danger:active,
					.btn-danger.active,
					.open .dropdown-toggle.btn-danger {
						background-color: #333;
						border-color: #000;
					}
					
					.btn-danger {
						border-color: #000;
						background-color: #f44242;
						border-radius: 0;
						font-size: 18px;
						line-height: 20px;
						margin: 0;
						padding: 15px 0;
						width: 100%;
					}
					
					.btn-inf:hover,
					.btn-danger:focus,
					.btn-danger:active,
					.btn-danger.active,
					.open .dropdown-toggle.btn-danger {
						background-color: #333;
						border-color: #000;
					}
					
					.box-select {
						cursor: pointer;
						margin-top: 7px;
						margin-bottom: 7px;
						padding: 10px 5px;
						text-align: center;
						background-color: #f5f5f5;
						border-radius: 10px;
						color: #333;
						font-weight: bold;
					}
					
					.box-select:hover {}
					
					.box-select.active,
					button-select.active:hover {
						background-color: #1d6ccd;
						color: #FFF;
						border-color: #e67c00;
					}
					
					.alert-heading {
						background-color: #333;
						color: #FFF;
						border-radius: 0;
					}
					
					.well {
						background-color: #FFF;
						border-radius: 0;
						box-shadow: 4px 4px 0 0 rgba(0, 0, 0, 0.1);
						padding: 10px;
					}
					
					a.jumbotron-links {
						color: #000;
					}
					
					a.jumbotron-links:hover,
					a.jumbotron-links:hover .alert {
						background-color: #1d6ccd;
						text-decoration: none;
					}
					
					.jumbotron-links .well {
						cursor: pointer;
						padding: 0;
					}
					
					.jumbotron-links .alert {
						margin: 0;
					}
					
					.jumbotron-links .jumbotron {
						background-color: transparent;
						margin-bottom: 0;
						padding-left: 0;
						padding-right: 0;
					}
					
					.glyphicon-size-massive {
						font-size: 5em;
					}
					
					.glyphicon-size-large {
						font-size: 3em;
					}
					
					.ux-pagetitle {
						background-color: #fff;
						box-shadow: 0 4px 0 rgba(0, 0, 0, 0.1);
						color: #333;
						margin-bottom: 30px;
						margin-top: -20px !important;
						padding: 15px 0;
					}
					
					p {
						word-wrap: break-word;
					}
				</style>





			</head>

			<body>
				<?  $s = new selector(); $s->logAction("init"); ?>

					<header>

		<div class="navbar my-navbar col-no-pad" role="navigation">
		<div class="col-sm-12">
					<div class="row">
						<div class="col-md-3 text-center col-no-pad">
							<form role="form" method="post">
								<input type="hidden" name="selector" value="killTransient" />
								<div id="cache1"><button type="submit" id="cache" class="btn btn-inf"><font color="white">Clear Cache (SQL/Varnish)</button></div></font>
							</form>
						</div>
						<div class="col-md-3 text-center col-no-pad">
							<form role="form" method="post">
								<input type="hidden" name="selector" value="redraw" />
								<div id="redraw1"><button type="submit" id="redraw" class="btn btn-inf"><font color="white">Refresh Values</button></div></font>
							</form>
						</div>
						<div class="col-md-3 text-center col-no-pad">
							<form role="form" method="post">
								<input type="hidden" name="selector" value="killProcesses" />
								<div id="kill1"><button type="submit" id="kill" class="btn btn-inf"><font color="white">Kill PHP Processes</button></div></font>
							</form>
						</div>
						<div class="col-md-3 text-center col-no-pad navbar-danger">
							<form role="form" method="post">
								<input type="hidden" name="selector" value="killself" />
								<div id="killself1"><button type="submit" id="killself" class="btn btn-danger"><font color="white">Remove <?=TOOL;?></button></div></font>
							</form>
						</div>
					</div>
				</div>
			</div>
		</header>

					<div id="main-content">

						<?php if($get_started->display->msg === true){ ?>

						<div class="container-fluid">

							<div class="row">

								<div class="col-xs-12">

									<div class="row ux-pagetitle">

								<div class="col-md-offset-1 col-md-5">
                                <h3><b>DATABASE NAME:</b><font color ="#1d6ccd"> <?=DB_NAME;?></font></h3>
								<h4><b>WordPress v:</b><font color ="#1d6ccd"> <?=WP_VER;?></font><b>   PHP v:</b><font color ="#1d6ccd"> <?=phpversion();?></h4></font>
								<h4><b>Abs. Path: </b><font color ="#1d6ccd"><? echo getcwd(); ?></h4></font>
								<h4><b>Web Node: </b><font color ="#1d6ccd"><? echo $GLOBALS['Web_Server']; ?></font></h4>
								<h4><b>Proxy Server: </b><font color ="#1d6ccd"><? echo $GLOBALS['Proxy_Server']; ?></font></h4>
								<h4><b>Cache Server: </b><font color ="#1d6ccd"><? echo $GLOBALS['Cache_Server']; ?></font><b>		Status: </b><font color ="#1d6ccd"><? echo $GLOBALS['is_cached']; ?></font>
							
								<?
								if($GLOBALS['WORKER'] == false){
								echo '<form role="form" method="post"><input type="hidden" name="selector" value="EnableWorker" /><button type="submit" id="EnableWorker" class="btn btn-primary pull-right" style="background-color:#ef1313;">Enable Worker</button></form>';
									}
								?>
								
								</h4> 

							</div>
							<div class="col-md-1">
						
							</div>
                            <div class="col-md-5 pull-right">
                               <h3>WordPress <?=TOOL;?> <font color ="#1d6ccd"><?=VERSION;?></font></h3>
								<h4><b><?=TOOL;?> Archive:</b><font id="last_tar_backup" color ="#1d6ccd"> <?=$_SESSION['tarball'];?></font></h4>
								<h4><b><?=TOOL;?> DB Backup:</b><font id="last_sql_backup" color ="#1d6ccd"> <?=$_SESSION['sql_backup'];?></font></h4>
								<h4><b>Site Preview:  </b><font color ="#1d6ccd"><a onclick="$('#preview1').toggle(); $('#MainMenu').toggle(); document.getElementById('preFrame').contentWindow.location.reload();var iframe =  document.getElementById('preFrame'); iframe.setAttribute('src', '/?nocache='+d.getTime()); document.getElementById('preFrame').src = document.getElementById('preFrame').src;"><?=$_SERVER['HTTP_HOST'];?></font></a>     Status: </b><font color ="#1d6ccd"> <? echo $GLOBALS['http_status']; ?></h4></font></a>
								<h4><b>DB Overhead: </b>
												<font id="overhead" color="#1d6ccd">
													<?php echo doMaths($GLOBALS['DBOverhead']); ?> </font>   <b>Email Relays:  </b><font id="relays" color ="#1d6ccd"><?=E_RELAY;?></h4></font>
											

											<!-- Single button -->
											<div class="btn-group">

											<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

								   				 MySQL <span class="caret"></span>

												  </button>

												<ul class="dropdown-menu">

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="PurgeSpam" />

															<div id="PurgeSpam1">

																<button type="submit" id="PurgeSpam" class="btn btn-block" style="background-color:#F0F0F0;">

												Delete Spam Comments

											</button>

															</div>

														</form>

													</li>
												<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="PurgeUnapproved" />

															<div id="PurgeUnapproved1">

																<button type="submit" id="PurgeUnapproved" class="btn btn-block" style="background-color:#F0F0F0;">

												Delete Unapproved Comments

											</button>

															</div>

														</form>

													</li>

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="RepairDB" />

															<div id="RepairDB1">

																<button type="submit" id="RepairDB" class="btn btn-block" style="background-color:#F0F0F0;">

												Repair Tables

											</button>

															</div>

														</form>

													</li>

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="PurgeComms" />

															<div id="PurgeComms1">

																<button type="submit" id="PurgeComms" class="btn btn-block" style="background-color:#F0F0F0;">

												Delete ALL Comments

											</button>

															</div>

														</form>

													</li>

													

														<li>

															<form role="form" method="post">

																<input type="hidden" name="selector" value="DisComms" />

																<div id="DisComms1">

																	<button type="submit" id="DisComms" class="btn btn-block" style="background-color:#F0F0F0;">

												Disable Comments

											</button>

																</div>
															</form>
														</li> 

														<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="OptDB" />

															<div id="OptDB1">

																<button type="submit" id="OptDB" class="btn btn-block" style="background-color:#F0F0F0;">

												Optimize MySQL

											</button>

															</div>

														</form>

													</li>




											</div>
											<div class="btn-group">

												<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

								    PHP <span class="caret"></span>

								  </button>

												<ul class="dropdown-menu">

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="install_ionCube" />

															<div id="install_ionCube1">

																<button type="submit" id="install_ionCube" class="btn btn-block" style="background-color:#F0F0F0;">

												Enable ionCube

											</button>

															</div>

														</form>

													</li> 


													<li>
														<a href="./<?php echo basename($_SERVER["SCRIPT_FILENAME"]) ?>?phpinfo=<?php echo time(); ?>" target="_blank"
														    style="background-color:#F0F0F0;">
															<center><b>PHP Info</b></center>
														</a>
													</li>

													<li>
														<a href="./<?php echo basename($_SERVER["SCRIPT_FILENAME"]) ?>?mail=<?php echo time(); ?>" target="_blank"
														    style="background-color:#F0F0F0;">
															<center><b>PHP Mail Test</b></center>
														</a>
													</li>



												</ul>



											</div>

											<div class="btn-group">

												<button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

								    WordPress <span class="caret"></span>

								  </button>

												<ul class="dropdown-menu">

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="BackupFramework" />

															<div id="BackupFramework1">

																<button type="submit" id="BackupFramework" class="btn btn-block" style="background-color:#F0F0F0;">

															Backup Framework

															</button>

															</div>

														</form>

													</li>	
												<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="regenthumbs" />

															<div id="regenthumbs1">

																<button type="submit" id="regenthumbs" class="btn btn-block" style="background-color:#F0F0F0;">

															Regenerate Thumbnails

															</button>

															</div>

														</form>

													</li>
												<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="ResetUpload" />

															<div id="ResetUpload1">

																<button type="submit" id="ResetUpload" class="btn btn-block" style="background-color:#F0F0F0;">

															Reset Upload Path

															</button>

															</div>

														</form>

													</li>
													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="LoginReset" />

															<div id="LoginReset1">

																<button type="submit" id="LoginReset" class="btn btn-block" style="background-color:#F0F0F0;">

															Reset Login Lockout

															</button>

															</div>

														</form>

													</li>
													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="roleReset" />

															<div id="roleReset1">

																<button type="submit" id="roleReset" class="btn btn-block" style="background-color:#F0F0F0;">

												Reset All User Roles

											</button>

															</div>

														</form>

													</li>
													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="PluginUpdate" />

															<div id="PluginUpdate1">

																<button type="submit" id="PluginUpdate" class="btn btn-block" style="background-color:#F0F0F0;">

												Update Plugins

											</button>

															</div>

														</form>

													</li>

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="ThemeUpdate" />

															<div id="ThemeUpdate1">

																<button type="submit" id="ThemeUpdate" class="btn btn-block" style="background-color:#F0F0F0;">

												Update Themes

											</button>

															</div>

														</form>

													</li>

													<li>

														<form role="form" method="post">

															<input type="hidden" name="selector" value="UpdateCore" />

															<div id="UpdateCore1">

																<button type="submit" id="UpdateCore" class="btn btn-block" style="background-color:#F0F0F0;">

												Update WP-Core

											</button>

															</div>

														</form>

													</li>

													<li>

														<a href='./<?php echo basename($_SERVER["SCRIPT_FILENAME"]) ?>?integrity' target='_blank' class="btn btn-block" style="background-color:#F0F0F0;">Check WP-Core</a>

													</li>

													<?php

									if($GLOBALS['ismwp'] == false){

										echo '<li><a href="./'.basename($_SERVER["SCRIPT_FILENAME"]).'?core='.time().'" target="_blank" class="btn btn-block" style="background-color:#F0F0F0;">Repair WP-Core</a></li>';

									}

								   ?>

												</ul>

											</div>
								<div class="btn-group">
							    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
								    Sign-In <span class="caret"></span>
								  </button>
								  <ul class="dropdown-menu">
								 	<li>
										<form role="form" method="post">
										<input type="hidden" name="selector" value="supportUser" />
											<div id="supportUser1">
												<button type="submit" id="supportUser" class="btn btn-block" style="background-color:#F0F0F0;">Create/Update User</button>
											</div>
										</form>
									</li>
								   <li>
									<form role="form" method="post">
										<input type="hidden" name="selector" value="AutoLogin" />
										<div id="AutoLogin1">
											<button type="submit" id="AutoLogin" class="btn btn-block">
												Sign into WordPress
											</button>
										</div>
									</form>
								   </li>
								   <li class="dropdown-header">User: wpps-support</li>
								   <li id='supportPass' class="dropdown-header">Pass: </li>
								  </ul>
								  </div>
								  
                        	</div>
                        </div>
                       
                        <div id="preview1" class="preview1" align="center" style=" display:none; height:600px; width:850px; margin-left:auto; margin-right:auto; " >
                			<iframe id="preFrame" height="100%" width="100%" src=""></iframe> 
                		  </div>
                    </div>
                 
                </div>

										</div>

									</div>



									<div id="preview1" class="preview1" align="center" style=" display:none; height:600px; width:850px; margin-left:auto; margin-right:auto; ">

										<iframe id="preFrame" height="100%" width="100%" src=""></iframe>

									</div>

								</div>



							</div>



							<div id="MainMenu" class="row">

								<div class="col-sm-offset-2 col-sm-8">

									<div class="row">

										<div id="primary-menu" class="carousel slide" data-ride="carousel">

											<!-- Wrapper for carousel panes -->

											<div class="carousel-inner" role="listbox">

												<!-- Main Menu -->

												<div class="item active">

													<div class="col-xs-12">



														<!-- Menu items -->

														<div class="row">



															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="1">

																<div class="col-sm-4">

																	<div class="well">

																		<h4 class="alert alert-heading">DATABASE THE THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-transfer glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Import/Export Database Content

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>



															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="2">

																<div class="col-sm-4">

																	<div class="well">

																		<h4 class="alert alert-heading">ARCHIVE THE THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-compressed glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Tarball the things / unpack a plethora of archive types!

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>



															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="3">

																<div class="col-sm-4">

																	<div class="well">

																		<h4 class="alert alert-heading">UPDATE THE THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-wrench glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Synchronize Table Prefixes and Update Site / Home URL

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>



															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="4">

																<div class="col-sm-4">

																	<div class="well">

																		<h4 class="alert alert-heading">INI THE THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-list-alt glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Create a PHP initialization file

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>



															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="5">

																<div class="col-sm-4">

																	<div class="well">

																		<h4 class="alert alert-heading">TROUBLESHOOT THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-screenshot glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Enable WordPress Debugging and Toggle Plugins/Themes

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>

															<a class="jumbotron-links" data-target="#primary-menu" data-slide-to="6">
                                                    <div class="col-sm-4">
                                                        <div class="well">
<h4 class="alert alert-heading">SERVICE THE THINGS!</h4>

																		<div class="row">

																			<div class="col-lg-12 text-center jumbotron">

																				<span class="glyphicon glyphicon-search glyphicon-size-massive"></span>

																			</div>

																		</div>

																		<div class="row">

																			<div class="col-lg-12">

																				<div class="alert alert-heading small">

																					<p class="list-group-item-text hidden-xs">

																						Perform one-click expert services

																					</p>

																				</div>

																			</div>

																		</div>

																	</div>

																</div>

															</a>



														</div>

													</div>

												</div>



												<!-- Backup / Import MySQL Databases -->

												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															BACKUP/RESTORE THE THINGS!

														</h2>



														<div class="row">

															<div class="col-md-4">

																<div class="well">

																	<?=$get_started->db_output;?>

																</div>

															</div>



															<div class="col-md-8">

																<div class="well">

																	<div class="row">

																		<div id='dbRestore' class="col-sm-12">

																			<h3>Restore Backup</h3>

																			<?=$s->select_sql_backup();?>

																		</div>

																	</div>

																</div>

															</div>



														</div>

													</div>

												</div>



												<!-- Tarball Archive -->

												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															PACK THE THINGS!

														</h2>

														<div class="row">

															<div class="col-md-5">

																<div class="well">

																	<h3>Create Tarball Archive</h3><br>

																	<p>This goes through the following steps:</p>

																	<ol>

																		<li>Creates a .sql.gz dump within wp-content/</li>
																		<p>

																			<li>Archives the MySQL backup AND wp-content/ as a .tar.gz file within wp-content/ for easy transferring</li><br>

																	</ol>

																	<div class="row">

																		<div class="col-sm-12">

																			<form id="create_archive" name="create_archive" role="form" method="post">

																				<input type="hidden" name="selector" value="create_archive">

																				<button type="submit" class="btn btn-default"><font color ="white">CREATE ARCHIVE</font></button>

																			</form>

																		</div>

																	</div>

																</div>

															</div>

															<div class="col-md-7">

																<div class="well">

																	<h3>Unpack Archive</h3>

																	<div class="row">

																		<div class="col-sm-12 text-info">

																			<p>This will unarchive the following extensions:</p>

																			<div class="row">

																				<div class="col-sm-6">

																					<ul class="list-unstyled">

																						<li>.zip</li>

																						<li>.tar</li>

																						<li>.gz</li>

																					</ul>

																				</div>

																				<div class="col-sm-6">

																					<ul class="list-unstyled">

																						<li>.tar.gz</li>

																						<li>.bz2</li>

																					</ul>

																				</div>

																			</div>

																		</div>



																	</div>



																	<div class="row">

																		<div class="col-sm-12">

																			<?=$s->select_archive();?>

																		</div>

																	</div>

																</div>

															</div>

														</div>

													</div>

												</div>



												<!-- Update Prefixes / Site URL -->

												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															UPDATE THE THINGS!

														</h2>

														<form name="fix_things" class="form-horizontal" role="form" method="post">

															<div class="row">

																<div class="col-sm-6">

																	<div class="well">

																		<h3>Update Table Prefixes</h3>

																		<p>

																			This option will update the table prefixes and all of the database entries for capabilities, user_roles, etc. that are necessary
																			for WordPress to operate normally.

																		</p>

																		<div class="row">

																			<div class="col-xs-offset-2 col-xs-8 box-select">

																				<?=$s->get_prefixes();?>

																			</div>

																		</div>

																	</div>

																</div>

																<div class="col-sm-6">

																	<div class="well">

																		<h3>Update Site URL</h3>

																		<p>This option will update the siteurl and home database values to reflect the domain being currently used
																			in the address bar. <b>Ensure the 'New:' value is correct before updating!</b></p>

																		<div class="row">

																			<div class="col-xs-offset-2 col-xs-8 box-select">

																				<?=$s->get_url();?>

																			</div>

																		</div>

																	</div>

																</div>



																<input type="hidden" name="selector" value="fix_things">

															</div>

															<div class="row">

																<div class="col-sm-12 text-center">

																	<button type="submit" class="btn btn-default">

															<font color ="white">UPDATE

															<span class="small"></span></font>

														</button>

																</div>

															</div>

														</form>

													</div>

												</div>



												<!-- Simple INI Generator -->

												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															INI THE THINGS!

														</h2>

													</div>

													<form name="create-ini" class="form-horizontal" role="form" method="post">

														<div class="col-sm-12">

															<div class="well">

																<div class="row">

																	<div class="col-md-4 hidden-xs">

																		<p>

																			This function will create a PHP initialization file using the PHP directives from the form below. When 'CREATE INI' is clicked
																			it will create the file, kill PHP processes and self-destruct. You may need to reupload the file if this
																			is not the only function you are using <?=TOOL;?> for.

																		</p>

																		<table class="table table-hover">

																			<thead>

																				<tr>

																					<th>Environment</th>

																					<th>INI file</th>

																				</tr>

																			</thead>

																			<tbody>

																				<tr>

																					<td>Shared cPanel

																						<a href="#" data-toggle="tooltip" title="cPanel also supports php.ini">

																							<span class="small glyphicon glyphicon-info-sign"></span>

																						</a>

																					</td>

																					<td>.user.ini</td>

																				</tr>

																				<tr>

																					<td>Shared Plesk</td>

																					<td>.user.ini</td>

																				</tr>

																				<tr>

																					<td>

																						Managed WordPress

																						<a href="#" data-toggle="tooltip" title="WPaaS also supports php.ini, but .user.ini is recommended">

																							<span class="small glyphicon glyphicon-info-sign"></span>

																						</a>

																					</td>

																					<td>.user.ini</td>

																				</tr>

																				<tr>

																					<td>Other Legacy Shared</td>

																					<td>php5.ini</td>

																				</tr>

																			</tbody>

																		</table>

																		<p class="text-info small">

																			.user.ini files do not let customers modify ALL of the same settings as a php.ini file. The .user.ini file is only valid
																			for PHP 5.3+ installations.

																		</p>

																		<!--#DMZ<p class="text-info small">

																See <a href='http://php.net/manual/en/configuration.file.per-user.php' target='_blank'>http://php.net/manual/en/configuration.file.per-user.php</a> for more information.
																
																<a href='https://www.godaddy.com/help/what-filename-does-my-php-initialization-file-need-to-use-8913' target='_blank'>https://www.godaddy.com/help/what-filename-does-my-php-initialization-file-need-to-use-8913</a>

															</p>-->

																	</div>



																	<div class="col-md-8">

																		<div class="row">

																			<div class="col-md-12">

																				<div class="form-group">

																					<label for="ini_select" class="col-md-6 control-label">INI File</label>

																					<div class="col-md-3">

																						<select class="form-control" name="ini_select">

																				<option value=".user.ini">.user.ini</option>

																				<option value="php.ini">php.ini</option>

																				<option value="php5.ini">php5.ini</option>

																			</select>

																					</div>

																				</div>

																				<div class="form-group">

																					<label for="php_memory_limit" class="col-md-6 control-label">

																			Memory Limit

																			<a href="#" data-toggle="tooltip" title="The amount of memory allocated in megabytes to a single PHP processes.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- memory_limit default --

																			$ini_value = $memory_limit; 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_memory_limit" selected>

																				<option value="<?=$ini_value;?>">

																					* <?=$ini_value;?> *

																				</option>

																				<option value="64M">64M</option>
																				
																				<option value="128M">128M</option>

																				<option value="256M">256M</option>

																				<option value="512M">512M</option>

																				<option value="1024M">1024M</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_max_execution_time" class="col-md-6 control-label">

																			Max Execution Time

																			<a href="#" data-toggle="tooltip" title="The time allowed in seconds for the entire script to execute before timing out.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- max_execution default -- 

																			$ini_value = $max_execution; 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_max_execution_time">

																				<option value="<?=$ini_value;?>" selected>

																					* <?=$ini_value;?> *

																				</option>

																				<option value="30">30</option>

																				<option value="60">60</option>

																				<option value="90">90</option>

																				<option value="120">120</option>

																				<option value="300">300</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_max_input_time" class="col-md-6 control-label">

																			Max Input Time

																			<a href="#" data-toggle="tooltip" title="The time allowed in seconds for PHP to parse input variables (like GET and POST) before timing out.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- max_input_time default -- 

																			$ini_value = ini_get('max_input_time'); 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_max_input_time">

																				<option value="<?=$ini_value;?>" selected>

																					* <?=$ini_value;?> *

																				</option>

																				<option value="60">60</option>

																				<option value="90">90</option>

																				<option value="120">120</option>

																				<option value="120">150</option>

																				<option value="300">300</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_post_max_size" class="col-md-6 control-label">

																			POST Max Size

																			<a href="#" data-toggle="tooltip" title="The largest size in megabytes a POST request can be (often related to uploads since uploads typically utilize a POST request)">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- post_max_size default -- 

																			$ini_value = ini_get('post_max_size'); 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_post_max_size">

																				<option value="<?=$ini_value;?>" selected>

																					* <?=$ini_value;?> *

																				</option>

																				<option value="65M">65M</option>

																				<option value="75M">75M</option>

																				<option value="85M">85M</option>

																				<option value="100M">100M</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_max_input_vars" class="col-md-6 control-label">

																			Max Input Variables

																			<a href="#" data-toggle="tooltip" title="The total number of input variables (GET or POST) you can assign in a PHP script.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- max_input_vars default -- 

																			$ini_value = ini_get('max_input_vars'); 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_max_input_vars">

																				<option value="<?=$ini_value;?>" selected>

																					* <?=$ini_value;?> *

																				</option>

																				<option value="1000">1000</option>

																				<option value="2500">2500</option>

																				<option value="4000">4000</option>

																				<option value="5000">5000</option>

																				<option value="10000">10000</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_file_uploads" class="col-md-6 control-label">

																			File Uploads

																			<a href="#" data-toggle="tooltip" title="Disable (OFF) or Enable (ON) file uploads in PHP.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- file_uploads default -- 

																			$ini_value = ini_get('file_uploads'); 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_file_uploads">

																				<option value="<?=$ini_value;?>" selected>

																					* <?= ($ini_value ? '1 - ON' : '0 - OFF');?> *

																				</option>

																				<option value="1">1 - ON</option>

																				<option value="0">0 - OFF</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_max_file_uploads" class="col-md-6 control-label">

																			Max File Uploads

																			<a href="#" data-toggle="tooltip" title="Maximum number of concurrent uploads that can be performed in PHP.">

																				<span class="small glyphicon glyphicon-question-sign"></span>

																			</a>

																		</label>



																					<?php // -- file_uploads default -- 

																			$ini_value = ini_get('max_file_uploads'); 

																		?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_max_file_uploads">

																				<option value="<?=$ini_value;?>" selected>

																					* <?=$ini_value;?> *

																				</option>

																				<option value="20">20</option>

																				<option value="25">25</option>

																				<option value="30">30</option>

																				<option value="35">35</option>

																			</select>

																					</div>

																				</div>



																				<div class="form-group">

																					<label for="php_upload_max_filesize" class="col-md-6 control-label">

																	Max Upload Filesize

																	<a href="#" data-toggle="tooltip" title="Maximum size in megabytes PHP will allow per uploaded file.">

																		<span class="small glyphicon glyphicon-question-sign"></span>

																	</a>

																</label>



																					<?php // -- upload_max_filesize default -- 

																	$ini_value = ini_get('upload_max_filesize'); 

																?>

																					<div class="col-md-3">

																						<select class="form-control" name="php_upload_max_filesize">

																		<option value="<?=$ini_value;?>" selected>

																			* <?=$ini_value;?> *

																		</option>

																		<option value="64M">64M</option>

																		<option value="100M">100M</option>

																		<option value="150M">150M</option>

																		<option value="200M">200M</option>

																	</select>

																					</div>

																				</div>

																			</div>

																		</div>



																		<div class="row">

																			<div class="col-md-12 text-center">

																				<p class="text-small text-muted">

																					<strong>* value *</strong> denotes the current active setting for that variable

																				</p>

																			</div>

																		</div>



																	</div>
																	<!-- End Select options column -->

																</div>

															</div>

														</div>



														<div class="col-sm-12 text-center">

															<button type="submit" class="btn btn-default">

                                                    <font color ="white">CREATE INI

                                                    <span class="small"></span></font>

                                                </button><br>

														</div>

														<input type="hidden" name="selector" value="createINI">

													</form>

												</div>



												<!-- Troubleshoot Things! -->

												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															Troubleshoot Things!

														</h2>

														<form name="wp_debug" class="form-horizontal" role="form" method="post">

															<div class="row">

																<div class="col-sm-6">

																	<div class="well">

																		<h3>Debug Things!</h3>

																		<p>

																			This tool will assist in enabling debugging for troubleshooting purposes. This will enable WordPress/PHP debugging. You can
																			review at:<b> /wp-content/debug.log</b> * please note that this is the default location

																		</p>

																		<div class="row">

																			<div class="col-xs-offset-2 col-xs-8 box-select">

																				<?=$s->sel_wp_debug();?>

																			</div>

																		</div>

																	</div>

																</div>

																<div class="col-sm-6">

																	<div class="well">

																		<h3>Toggle Things!</h3>

																		<p>

																			If you are troubleshooting what is going wrong in a plugin or theme, you have found the right place. Many people may think
																			they need to review their server logs, but you should always start by debugging your application!
																			<p>

																				<center>
																					<h4>Toggle Plugins and/or Theme on and off</h4>
																				</center>

																			</p>

																			<div class="row">

																				<div class="col-xs-offset-1 col-xs-4 box-select">

																					<?=$s->disable_plugins();?>

																				</div>

																				<div class="row">

																					<div class="col-xs-offset-1 col-xs-4 box-select">

																						<?=$s->default_theme();?>

																					</div>

																				</div>

																			</div>

																	</div>

																</div>





																<input type="hidden" name="selector" value="fix_things">

															</div>

															<div class="row">

																<div class="col-sm-12 text-center">

																	<button type="submit" class="btn btn-default">

															<font color ="white">Update</font>

														</button>

																</div>

															</div>

														</form>


													</div>

												</div>

												<!-- #service -->
												<div class="item">

													<div class="col-sm-12">

														<h2 class="alert alert-heading">

															<a class="btn btn-warning" data-target="#primary-menu" data-slide-to="0"><span class="glyphicon glyphicon-chevron-left"></span></a>															Service Things!

														</h2>


														<div class="row">

															<div class="col-sm-6">

																<div class="well">

																	<h3>Create Child Theme!</h3>

																	<p>

																		Choose a theme from the drop down to create a child theme of it.

																	</p>

																	<div class="row">

																		<div class="col-xs-offset-2 col-xs-8">
																			<form name="child_theme" class="form-horizontal" role="form" method="post">
																				<input type="hidden" name="selector" value="child_theme" />
																				<select class="form-control" name="child_theme_select">
																			<?php 
																			$themes = array_filter(glob('./wp-content/themes/*'), 'is_dir');
																			foreach ($themes as $theme) {
																				echo "<option value='".$theme."'>".basename($theme)."</option>";
																			}
																			?>
																				</select>
																				<button type="submit" class="btn btn-default">
																			<font color ="white">Create Child Theme</font>
																		</button>
																			</form>

																		</div>
																	</div>
																</div>
															</div>
														</div>


														<div class="row">
															<div class="col-sm-6">
																<div class="well">
																	<h3>Permalinks!</h3>
																	<form name="permalinks" class="form-horizontal" role="form" method="post">
																		<input type="hidden" name="selector" value="permalinks" /> Permalink Structure: <select class="form-control"
																		    name="permalink_select">
																<option value="blank">Plain</option>
																<option value="/%year%/%monthnum%/%day%/%postname%/">Day and Name</option>
																<option value="/%year%/%monthnum%/%postname%/">Month and Name</option>
																<option value="/archives/%post_id%">Numeric</option>
																<option value="/%postname%/">Post Name</option>
															</select>
																		<button type="submit" class="btn btn-default">
																<font color ="white">Set Permalinks</font>
															</button>
																	</form>
																</div>
															</div>
														</div>

													</div>

												</div>

											</div>


										</div>

									</div>

									<!-- End Panes -->

								</div>

							</div>
							<!-- End column offset wrapper -->

						</div>

					</div>

					<?php 

			}else{ 

				echo '<div class="row text-center">'.$get_started->display->msg.'</div>';

			}

		?>



					<!-- JS CDNs for Bootstrap and jQuery -->

					<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

					<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>



					<!-- This function is to show/hide elements on the page -->

					<script>
						var d = new Date();

						$(document).keydown(function (e) {

							if (e.keyCode == 80) {

								var srcAttr = $('#preFrame').attr('src');

								if (!srcAttr) {

									var iframe = document.getElementById('preFrame');

									iframe.setAttribute('src', '/?nocache=' + d.getTime());

									document.getElementById('preFrame').src = document.getElementById('preFrame').src;

								}

								$("#preview1").toggle();

								$("#MainMenu").toggle();

							}

						});

						$(document).keyup(function (r) {

							if (r.keyCode == 80) {

								var srcAttr = $('#preFrame').attr('src');

								if (!srcAttr) {

									$('preFrame').attr('src', $('preFrame').attr('src'));

								}

							}

						});

						$("#cache").click(function () {

							// assumes element with id='cache'

							$("#cache1").toggle();

							$("#cache1").toggle();

						});

						$("#kill").click(function () {

							// assumes element with id='kill'

							$("#kill1").toggle();

							$("#kill1").toggle();

						});

						$("#remove").click(function () {

							// assumes element with id='remove'

							$("#remove1").toggle();

							$("#remove1").toggle();

						});

						$("#supportUser").click(function () {

							// assumes element with id='remove'

							$("#supportUser1").toggle();

							$("#supportUser1").toggle();

						});
					</script>
<script>
			$(function(){
  				$('[data-toggle="tooltip"]').tooltip()	// Enable tooltips
				$('#primary-menu').carousel({interval:0});	// Set the cycle time to zero for the menu
				// Sets true / false to hidden values for box-select (on/off) toggles
				$('.box-select').on('click', function(){
					var input = $(this).find('input:hidden');
					console.log(input.val());
					$(this).toggleClass('active');
					if($(this).hasClass('active'))
						input.val('true');
					else
						input.val('false');
				});
				<!-- Universal AJAX submission for forms -->
				$("form").submit(function(e){
					e.preventDefault();
					var form = $(this),
						sButton = form.find(':submit');
					
					if(!sButton.hasClass('btn-info')){
						var fContainer = sButton.closest('div[class^="col-"]')
					}else{
						var fContainer = sButton.closest('div[class="row"]');						
					}
					serializedData = form.serialize();
					if(fContainer.find('.response').length == 0){	
						fContainer.prepend('<div class="row response"><div style="margin-bottom:-25px;" class="col-sm-12"></div></div>');
					}
					// Disable all buttons
					$(':button').each(function(){
						//$(this).addClass('disabled');
					});
					var output = fContainer.find('.response').find('.col-sm-12');
					output.html('<div class="alert alert-info" role="alert" style="margin-bottom:-15px;" >Please wait patiently while request is processed.</div>');
					$.ajax({
						type: $(form).attr('method'),
						url: $(form).attr('action'),
						data: serializedData,
						success: function(response){
							output.html(response);
							// Re-enable all buttons
							$(':button').each(function(){
								//$(this).removeClass('disabled');
							});
						},
						error: function(x, t, m) {
							if(t==="timeout") {
								output.html('<div class="alert alert-warning" role="alert"><b>Request Timed Out!</b></div>');
							} else if(x.status === 500){
								output.html('<div class="alert alert-warning" role="alert"><p><b>Internal Server Error:</b> It\'s likely the script timed out.</p><p>If you are executing a BASH command (like restoring a database), give it time to complete. If you refresh the page and the command is still running you will be met with an alert.</div>')
							} else if(x.status > 200){
								output.html('<div class="alert alert-warning" role="alert"><p>Something went wrong that we did not account for. The HTTP Status code is: ' + x.status + '.</p><p>Please troubleshoot accordingly.</p></div>');
							}
						}
					});
					//e.preventDefault();
				});

			});
 	
		</script>
					<script>
						window.addEventListener('beforeunload', function (event) {
							img = new Image();
							img.src = '<?php echo $_SERVER["SCRIPT_NAME"]?>?killself';
						});

						window.addEventListener('unload', function (event) {
							img = new Image();
							img.src = '<?php echo $_SERVER["SCRIPT_NAME"]?>?killself';
						});
					</script>
			</body>
			</html>
			<?php
}else{
	// The request is an AJAX response, as all forms implement a $_POST['selector']
	$select = new selector($_POST['selector']);
}

}//PHPINFO CLOSE
